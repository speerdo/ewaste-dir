import { c as createAstro, a as createComponent, r as renderTemplate, d as defineScriptVars, e as addAttribute, m as maybeRenderHead, b as renderComponent, f as renderScript, g as renderSlot, l as renderHead } from './astro/server_BBuoheSG.mjs';
import 'kleur/colors';
import { g as getAllCityStatePairs, e as getFeaturedStates } from './cityData_BBNtT0tu.mjs';
import 'clsx';
/* empty css                          */

const PRODUCTION_URL = "https://www.recycleoldtech.com";
function getAbsoluteUrl(path) {
  try {
    new URL(path);
    return path;
  } catch {
    const normalizedPath = path.startsWith("/") ? path : `/${path}`;
    return new URL(normalizedPath, PRODUCTION_URL).toString() ;
  }
}
function getCanonicalUrl(requestUrl) {
  const url = typeof requestUrl === "string" ? new URL(requestUrl) : requestUrl;
  return new URL(url.pathname + url.search, PRODUCTION_URL).toString() ;
}

class GeocodingError extends Error {
  constructor(message, details) {
    super(message);
    this.details = details;
    this.name = "GeocodingError";
  }
}
const geocodeCache = /* @__PURE__ */ new Map();
const CACHE_DURATION = 1e3 * 60 * 60;
async function reverseGeocode(coordinates) {
  const cacheKey = `${coordinates.lat.toFixed(6)},${coordinates.lng.toFixed(
    6
  )}`;
  const cached = geocodeCache.get(cacheKey);
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached.data;
  }
  const params = new URLSearchParams({
    lat: coordinates.lat.toString(),
    lng: coordinates.lng.toString()
  });
  const url = new URL(`/api/geocode?${params.toString()}`, PRODUCTION_URL).toString() ;
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(coordinates)
    });
    const data = await response.json();
    if (!response.ok) {
      throw new GeocodingError(
        data.error || `HTTP error ${response.status}`,
        data.details
      );
    }
    if (!data.city || !data.state || !data.coordinates) {
      throw new GeocodingError("Invalid response format", data);
    }
    const location = {
      city: data.city,
      state: data.state,
      coordinates: data.coordinates
    };
    geocodeCache.set(cacheKey, {
      data: location,
      timestamp: Date.now()
    });
    return location;
  } catch (error) {
    if (error instanceof GeocodingError) {
      throw error;
    }
    throw new GeocodingError("Failed to fetch location data", {
      originalError: error instanceof Error ? error.message : String(error)
    });
  }
}
async function getCurrentLocation() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error("Geolocation is not supported by your browser"));
      return;
    }
    navigator.geolocation.getCurrentPosition(
      (position) => {
        resolve({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
      },
      (error) => {
        let message = "An unknown error occurred";
        switch (error.code) {
          case error.PERMISSION_DENIED:
            message = "Please allow location access to use this feature";
            break;
          case error.POSITION_UNAVAILABLE:
            message = "Location information is unavailable";
            break;
          case error.TIMEOUT:
            message = "Location request timed out";
            break;
        }
        reject(new Error(message));
      },
      {
        enableHighAccuracy: true,
        timeout: 1e4,
        maximumAge: 0
      }
    );
  });
}

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro("https://www.recycleoldtech.com");
const $$SearchInput = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$SearchInput;
  const { placeholder = "Enter a city or zip code...", className = "", variant = "hero" } = Astro2.props;
  const cityStatePairs = await getAllCityStatePairs();
  const id = variant === "hero" ? "hero" : "nav";
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", "<div", "", "> <form", ' class="relative flex" autocomplete="off"> <input type="text"', "", "", ' autocomplete="off"> ', " <button", ' type="button"', ' title="Use my location"> <svg', ' xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path> </svg> <svg', ' class="animate-spin h-5 w-5 text-gray-400 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> </button> <div', ' class="absolute -bottom-6 left-0 right-0 text-red-500 text-xs bg-red-50 p-1 rounded hidden"></div> </form> <!-- Search Results --> <div', ' class="absolute left-0 right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-50 max-h-96 overflow-y-auto"> <div', ' class="divide-y divide-gray-100"></div> </div> </div> <script type="module">', '\n  // Simple test script\n  console.log(\'Script loaded!\');\n\n  // Set up window global\n  if (typeof window !== \'undefined\') {\n    window.__CITY_STATE_PAIRS__ = window.__CITY_STATE_PAIRS__ || [];\n  }\n  \n  // Set up once DOM is ready\n  document.addEventListener(\'DOMContentLoaded\', () => {\n    console.log(\'DOM loaded!\');\n    \n    // Find all search components\n    document.querySelectorAll(\'[data-search-component]\').forEach(component => {\n      const id = component.getAttribute(\'data-search-component\');\n      console.log(`Found search component with ID: ${id}`);\n      \n      // Get elements for this search component\n      const searchInput = document.getElementById(`search-input-${id}`);\n      const searchButton = document.getElementById(`search-button-${id}`);\n      const searchResults = document.getElementById(`search-results-${id}`);\n      const resultsContent = document.getElementById(`results-content-${id}`);\n      const useLocationBtn = document.getElementById(`use-location-${id}`);\n      const searchForm = document.getElementById(`search-form-${id}`);\n      \n      // Exit if required elements not found\n      if (!searchInput || !searchResults || !resultsContent) {\n        console.error(`Missing required elements for search component ${id}`);\n        return;\n      }\n      \n      // Store global vars\n      let searchTimeout;\n      let cityStatePairs = []; // Will be populated from the server\n      \n      // Helper functions for UI feedback\n      function showLoading(isLoading) {\n        const searchIcon = document.getElementById(`search-icon-${id}`);\n        const spinner = document.getElementById(`spinner-${id}`);\n        const searchButton = document.getElementById(`search-button-${id}`);\n        \n        if (isLoading) {\n          // Show loading state\n          if (searchIcon && spinner) {\n            searchIcon.classList.add(\'hidden\');\n            spinner.classList.remove(\'hidden\');\n          }\n          if (searchButton) {\n            searchButton.setAttribute(\'disabled\', \'true\');\n          }\n        } else {\n          // Remove loading state\n          if (searchIcon && spinner) {\n            searchIcon.classList.remove(\'hidden\');\n            spinner.classList.add(\'hidden\');\n          }\n          if (searchButton) {\n            searchButton.removeAttribute(\'disabled\');\n          }\n        }\n      }\n      \n      function showLocationLoading(isLoading) {\n        const locationIcon = document.getElementById(`location-icon-${id}`);\n        const locationSpinner = document.getElementById(`location-spinner-${id}`);\n        const useLocationBtn = document.getElementById(`use-location-${id}`);\n        \n        if (isLoading) {\n          // Show loading state\n          if (locationIcon && locationSpinner) {\n            locationIcon.classList.add(\'hidden\');\n            locationSpinner.classList.remove(\'hidden\');\n          }\n          if (useLocationBtn) {\n            useLocationBtn.setAttribute(\'disabled\', \'true\');\n          }\n        } else {\n          // Remove loading state\n          if (locationIcon && locationSpinner) {\n            locationIcon.classList.remove(\'hidden\');\n            locationSpinner.classList.add(\'hidden\');\n          }\n          if (useLocationBtn) {\n            useLocationBtn.removeAttribute(\'disabled\');\n          }\n        }\n      }\n      \n      function showError(message) {\n        const errorEl = document.getElementById(`search-error-${id}`);\n        if (errorEl) {\n          errorEl.textContent = message;\n          errorEl.classList.remove(\'hidden\');\n        }\n      }\n      \n      function hideError() {\n        const errorEl = document.getElementById(`search-error-${id}`);\n        if (errorEl) {\n          errorEl.classList.add(\'hidden\');\n        }\n      }\n      \n      // Fetch city data from the server for client-side search\n      fetch(\'/api/cities-data\')\n        .then(response => response.json())\n        .then(data => {\n          cityStatePairs = data;\n          console.log(`Loaded ${cityStatePairs.length} cities for search`);\n        })\n        .catch(error => {\n          console.error(\'Failed to load city data:\', error);\n        });\n         \n      // Use location button\n      if (useLocationBtn) {\n        useLocationBtn.addEventListener(\'click\', async (e) => {\n          e.preventDefault();\n          hideError();\n          showLocationLoading(true);\n          \n          try {\n            const location = await getCurrentLocation();\n            if (!location) {\n              throw new Error("Could not determine your location");\n            }\n            \n            const { latitude, longitude } = location;\n            const geoData = await reverseGeocode(latitude, longitude);\n            \n            if (!geoData) {\n              throw new Error("Could not find your location");\n            }\n            \n            // Set the search input to the found location\n            searchInput.value = `${geoData.city}, ${geoData.state}`;\n            \n            // Trigger a search with this location\n            handleSearch();\n          } catch (error) {\n            console.error("Location error:", error);\n            showError(error instanceof Error ? error.message : "Could not access your location");\n          } finally {\n            showLocationLoading(false);\n          }\n        });\n      }\n  \n      // Search for matching cities/states\n      function searchLocations(query) {\n        console.log(`Searching for: "${query}"`);\n        query = query.toLowerCase().trim();\n        \n        if (!query) return [];\n        \n        // Check for zip code\n        const isZipCode = /^\\d{5}(-\\d{4})?$/.test(query);\n        if (isZipCode) {\n          return [{\n            text: `Find recycling centers near ${query}`,\n            type: \'zip\',\n            zip: query\n          }];\n        }\n        \n        // Try to find exact and partial matches\n        const exactMatches = [];\n        const partialMatches = [];\n        \n        // Check if cityStatePairs is available and not empty\n        if (!cityStatePairs || cityStatePairs.length === 0) {\n          showError("Search data is still loading. Please try again in a moment.");\n          return [];\n        }\n        \n        cityStatePairs.forEach(pair => {\n          const cityLower = pair.city.toLowerCase();\n          const stateLower = pair.state.toLowerCase();\n          \n          // Check for exact match\n          if (cityLower === query || stateLower === query) {\n            exactMatches.push({...pair, type: \'city\'});\n          }\n          // Check for partial match\n          else if (cityLower.includes(query) || stateLower.includes(query)) {\n            partialMatches.push({...pair, type: \'city\'});\n          }\n        });\n        \n        // Combine and limit results\n        return [...exactMatches, ...partialMatches].slice(0, 8);\n      }\n      \n      // Display search suggestions\n      function showSuggestions(suggestions) {\n        console.log(`Found ${suggestions.length} suggestions`);\n        \n        if (suggestions.length === 0) {\n          searchResults?.classList.add(\'hidden\');\n          return;\n        }\n        \n        // Generate suggestion HTML\n        if (resultsContent) {\n          resultsContent.innerHTML = suggestions\n            .map(suggestion => {\n              if (suggestion.type === \'zip\') {\n                return `\n                  <button\n                    type="button"\n                    class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group suggestion-item"\n                    data-type="zip"\n                    data-zip="${suggestion.zip}"\n                  >\n                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                    </svg>\n                    <span>${suggestion.text}</span>\n                  </button>\n                `;\n              }\n              \n              return `\n                <button\n                  type="button"\n                  class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group suggestion-item"\n                  data-type="city" \n                  data-url="${suggestion.url}"\n                >\n                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                  </svg>\n                  <span>${suggestion.city}, ${suggestion.state}</span>\n                </button>\n              `;\n            })\n            .join(\'\');\n            \n          // Add click handlers for suggestions\n          resultsContent.querySelectorAll(\'.suggestion-item\').forEach(button => {\n            button.addEventListener(\'click\', (e) => {\n              e.preventDefault();\n              const type = button.getAttribute(\'data-type\');\n              \n              if (type === \'city\') {\n                const url = button.getAttribute(\'data-url\');\n                if (url) window.location.href = url;\n              } else if (type === \'zip\') {\n                const zip = button.getAttribute(\'data-zip\');\n                if (zip) handleZipSearch(zip);\n              }\n            });\n          });\n        }\n        \n        // Show results dropdown\n        searchResults?.classList.remove(\'hidden\');\n      }\n      \n      // Handle a zip code search\n      async function handleZipSearch(zipCode) {\n        console.log(`Searching for zip code: ${zipCode}`);\n        showLoading(true);\n        hideError();\n        \n        try {\n          // Show loading state\n          if (resultsContent) {\n            resultsContent.innerHTML = `\n              <div class="px-4 py-3">\n                <svg class="animate-spin h-5 w-5 text-gray-400 inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\n                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\n                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\n                </svg>\n                <span>Finding recycling centers near ${zipCode}...</span>\n              </div>\n            `;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          \n          // Call our zipcode API\n          const apiUrl = new URL(\'/api/zipcode\', window.location.origin);\n          // Add cache busting query parameter to the URL\n          apiUrl.searchParams.append(\'_cb\', Date.now() + \'-\' + Math.random().toString(36).substr(2, 9));\n          \n          const response = await fetch(apiUrl, {\n            method: \'POST\',\n            headers: {\n              \'Accept\': \'application/json\',\n              \'Content-Type\': \'application/json\',\n              \'Cache-Control\': \'no-cache, no-store, must-revalidate\',\n              \'Pragma\': \'no-cache\',\n              \'X-Cache-Bust\': Date.now().toString()\n            },\n            cache: \'no-store\',\n            body: JSON.stringify({ \n              zip: zipCode, \n              _timestamp: Date.now(),\n              _random: Math.random().toString(36).substring(2)\n            }),\n          });\n          \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || `HTTP error ${response.status}`);\n          }\n          \n          const data = await response.json();\n          console.log(\'Zip code API response:\', data);\n          \n          if (!data || !data.city || !data.state) {\n            throw new Error(`Unable to find location data for zip code ${zipCode}`);\n          }\n          \n          console.log(`Zip code ${zipCode} resolves to ${data.city}, ${data.state}`);\n          \n          // First, try to find an exact match based on city and state\n          const exactMatch = cityStatePairs.find(pair => \n            pair.city.toLowerCase() === data.city.toLowerCase() &&\n            pair.state.toLowerCase() === data.state.toLowerCase()\n          );\n          \n          if (exactMatch) {\n            console.log(\'Found exact city match:\', exactMatch);\n            window.location.href = exactMatch.url;\n            return;\n          }\n          \n          console.log(`No exact match found for ${data.city}, ${data.state}. Looking for nearest city...`);\n          \n          // If no exact match, find the nearest city based on coordinates\n          if (data.coordinates && data.coordinates.lat && data.coordinates.lng) {\n            console.log(`Using coordinates: lat=${data.coordinates.lat}, lng=${data.coordinates.lng}`);\n            \n            // First try cities in the same state\n            const sameStateMatches = cityStatePairs.filter(pair => \n              pair.state.toLowerCase() === data.state.toLowerCase()\n            );\n            \n            console.log(`Found ${sameStateMatches.length} cities in ${data.state}`);\n            \n            if (sameStateMatches.length > 0) {\n              // Find if any cities have coordinates\n              const citiesWithCoords = sameStateMatches.filter(city => city.coordinates && \n                                                             city.coordinates.lat && \n                                                             city.coordinates.lng);\n              \n              console.log(`${citiesWithCoords.length} cities have coordinates information`);\n              \n              if (citiesWithCoords.length > 0) {\n                // Find the nearest city in the same state\n                let nearestCity = citiesWithCoords[0];\n                let shortestDistance = calculateDistance(\n                  data.coordinates, \n                  citiesWithCoords[0].coordinates\n                );\n                \n                console.log(`Initial nearest city: ${nearestCity.city} at ${shortestDistance.toFixed(2)} km`);\n                \n                for (const city of citiesWithCoords.slice(1)) {\n                  const distance = calculateDistance(data.coordinates, city.coordinates);\n                  console.log(`Checking ${city.city}: ${distance.toFixed(2)} km`);\n                  \n                  if (distance < shortestDistance) {\n                    shortestDistance = distance;\n                    nearestCity = city;\n                    console.log(`New nearest city: ${nearestCity.city} at ${shortestDistance.toFixed(2)} km`);\n                  }\n                }\n                \n                console.log(`Redirecting to nearest city: ${nearestCity.city}, ${nearestCity.state} (${shortestDistance.toFixed(2)} km away)`);\n                window.location.href = nearestCity.url;\n                return;\n              } else {\n                console.log(\'No cities with coordinates found in the same state. Using first city in state as fallback.\');\n                // If no cities have coordinates, just use the first city in the state\n                window.location.href = sameStateMatches[0].url;\n                return;\n              }\n            }\n          } else {\n            console.log(\'No coordinates available in the response. Falling back to fuzzy matching.\');\n          }\n          \n          // Fall back to fuzzy name matching\n          const cityMatches = cityStatePairs.filter(pair => \n            pair.state.toLowerCase() === data.state.toLowerCase() &&\n            (\n              pair.city.toLowerCase().includes(data.city.toLowerCase()) ||\n              data.city.toLowerCase().includes(pair.city.toLowerCase())\n            )\n          );\n          \n          console.log(`Found ${cityMatches.length} cities with fuzzy name matching`);\n          \n          if (cityMatches.length === 1) {\n            // If only one match, redirect directly\n            console.log(`Single fuzzy match found: ${cityMatches[0].city}. Redirecting.`);\n            window.location.href = cityMatches[0].url;\n            return;\n          } else if (cityMatches.length > 1 && resultsContent) {\n            // Show multiple matches\n            console.log(`Multiple matches found. Showing options to user.`);\n            resultsContent.innerHTML = `\n              <div class="px-4 py-3 text-gray-600">\n                <p>Found recycling centers near ${zipCode} (${data.city}, ${data.state}):</p>\n              </div>\n              ${cityMatches.map(match => `\n                <button\n                  type="button"\n                  class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group"\n                  data-url="${match.url}"\n                >\n                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                  </svg>\n                  <span>${match.city}, ${match.state}</span>\n                </button>\n              `).join(\'\')}\n            `;\n            \n            // Add click handlers\n            resultsContent.querySelectorAll(\'button[data-url]\').forEach(button => {\n              button.addEventListener(\'click\', () => {\n                const url = button.getAttribute(\'data-url\');\n                if (url) window.location.href = url;\n              });\n            });\n          } else if (resultsContent) {\n            // As a last resort, get ANY city in the same state\n            const anyCityInState = cityStatePairs.find(pair => \n              pair.state.toLowerCase() === data.state.toLowerCase()\n            );\n            \n            if (anyCityInState) {\n              console.log(`No direct matches found but found a city in the same state: ${anyCityInState.city}. Redirecting.`);\n              window.location.href = anyCityInState.url;\n              return;\n            }\n            \n            // If all else fails, tell the user no centers were found for that zip code\n            console.log(`No recycling centers found for zip code ${zipCode}`);\n            throw new Error(`No recycling centers found near ${zipCode} (${data.city}, ${data.state})`);\n          }\n        } catch (error) {\n          console.error(\'Error searching by zip:\', error);\n          if (resultsContent) {\n            resultsContent.innerHTML = `\n              <div class="px-4 py-3 text-red-500">\n                <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n                </svg>\n                ${error instanceof Error ? error.message : \'Error searching by zip code. Please try a city name instead.\'}\n              </div>\n            `;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError(error instanceof Error ? error.message : \'Error searching by zip code\');\n        } finally {\n          showLoading(false);\n        }\n      }\n      \n      // Calculate distance between two coordinate points\n      function calculateDistance(point1, point2) {\n        const R = 6371; // Earth\'s radius in kilometers\n        const dLat = toRad(point2.lat - point1.lat);\n        const dLon = toRad(point2.lng - point1.lng);\n        const lat1 = toRad(point1.lat);\n        const lat2 = toRad(point2.lat);\n\n        const a =\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c;\n      }\n\n      function toRad(value) {\n        return (value * Math.PI) / 180;\n      }\n      \n      // Handle main search submission\n      function handleSearch() {\n        console.log(\'Search button clicked\');\n        const query = searchInput.value.trim();\n        hideError();\n        showLoading(true);\n        \n        if (query.length < 2) {\n          if (resultsContent) {\n            resultsContent.innerHTML = `<div class="px-4 py-3 text-gray-600">Please enter a city or zip code.</div>`;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError("Please enter at least 2 characters");\n          showLoading(false);\n          return;\n        }\n        \n        // Check for numeric input that might be a zip code\n        const isAllDigits = /^\\d+$/.test(query);\n        if (isAllDigits && query.length !== 5) {\n          if (resultsContent) {\n            resultsContent.innerHTML = `\n              <div class="px-4 py-3 text-red-500">\n                <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n                </svg>\n                Zip codes must be 5 digits. Please enter a valid zip code.\n              </div>\n            `;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError("Zip codes must be 5 digits");\n          showLoading(false);\n          return;\n        }\n        \n        // Check for valid zip code\n        const isZipCode = /^\\d{5}(-\\d{4})?$/.test(query);\n        if (isZipCode) {\n          handleZipSearch(query);\n          return;\n        }\n        \n        // Try to find city match\n        const exactMatch = cityStatePairs.find(pair => \n          pair.city.toLowerCase() === query.toLowerCase() ||\n          pair.state.toLowerCase() === query.toLowerCase() ||\n          `${pair.city.toLowerCase()}, ${pair.state.toLowerCase()}` === query.toLowerCase()\n        );\n        \n        if (exactMatch) {\n          window.location.href = exactMatch.url;\n          return;\n        }\n        \n        // Show suggestions if any exist\n        const suggestions = searchLocations(query);\n        if (suggestions.length > 0) {\n          showSuggestions(suggestions);\n          return;\n        }\n        \n        // No matches found\n        if (resultsContent) {\n          resultsContent.innerHTML = `\n            <div class="px-4 py-3 text-red-500">\n              <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n              </svg>\n              No recycling centers found for "${query}". Please try another city or zip code.\n            </div>\n          `;\n        }\n        searchResults?.classList.remove(\'hidden\');\n        showError(`No recycling centers found for "${query}"`);\n        showLoading(false);\n      }\n      \n      // Set up event listeners\n      \n      // Input change - show suggestions as you type\n      if (searchInput) {\n        searchInput.addEventListener(\'input\', () => {\n          console.log(`Input changed: ${searchInput.value}`);\n          if (searchTimeout) {\n            clearTimeout(searchTimeout);\n          }\n          \n          const query = searchInput.value.trim();\n          if (query.length < 2) {\n            searchResults?.classList.add(\'hidden\');\n            return;\n          }\n          \n          searchTimeout = setTimeout(() => {\n            const suggestions = searchLocations(query);\n            showSuggestions(suggestions);\n          }, 150);\n        });\n        \n        // Handle Enter key press\n        searchInput.addEventListener(\'keydown\', (e) => {\n          if (e.key === \'Enter\') {\n            e.preventDefault();\n            handleSearch();\n          } else if (e.key === \'Escape\') {\n            searchResults?.classList.add(\'hidden\');\n          }\n        });\n      }\n      \n      // Search button click\n      if (searchButton) {\n        searchButton.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          handleSearch();\n        });\n      }\n      \n      // Form submit\n      if (searchForm) {\n        searchForm.addEventListener(\'submit\', (e) => {\n          e.preventDefault();\n          handleSearch();\n          return false;\n        });\n      }\n      \n      // Close suggestions when clicking outside\n      document.addEventListener(\'click\', (e) => {\n        const target = e.target;\n        if (searchInput && searchResults && !searchInput.contains(target) && !searchResults.contains(target)) {\n          searchResults.classList.add(\'hidden\');\n        }\n      });\n      \n      // Instead of using imported data, re-use the initial city state pairs that are already defined\n      // in the component.\n      try {\n        if (typeof window !== \'undefined\' && window.__CITY_STATE_PAIRS__) {\n          cityStatePairs = window.__CITY_STATE_PAIRS__;\n          console.log(`Using ${cityStatePairs.length} pre-loaded city pairs`);\n        }\n      } catch (e) {\n        console.error(\'Error accessing city data:\', e);\n      }\n    });\n  });\n<\/script> <!-- Add global data for client-side access --> <script type="module">', "\n  // Make city data available to client-side scripts\n  window.__CITY_STATE_PAIRS__ = cityStatePairs;\n<\/script>"], ["", "<div", "", "> <form", ' class="relative flex" autocomplete="off"> <input type="text"', "", "", ' autocomplete="off"> ', " <button", ' type="button"', ' title="Use my location"> <svg', ' xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path> </svg> <svg', ' class="animate-spin h-5 w-5 text-gray-400 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> </button> <div', ' class="absolute -bottom-6 left-0 right-0 text-red-500 text-xs bg-red-50 p-1 rounded hidden"></div> </form> <!-- Search Results --> <div', ' class="absolute left-0 right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-50 max-h-96 overflow-y-auto"> <div', ' class="divide-y divide-gray-100"></div> </div> </div> <script type="module">', '\n  // Simple test script\n  console.log(\'Script loaded!\');\n\n  // Set up window global\n  if (typeof window !== \'undefined\') {\n    window.__CITY_STATE_PAIRS__ = window.__CITY_STATE_PAIRS__ || [];\n  }\n  \n  // Set up once DOM is ready\n  document.addEventListener(\'DOMContentLoaded\', () => {\n    console.log(\'DOM loaded!\');\n    \n    // Find all search components\n    document.querySelectorAll(\'[data-search-component]\').forEach(component => {\n      const id = component.getAttribute(\'data-search-component\');\n      console.log(\\`Found search component with ID: \\${id}\\`);\n      \n      // Get elements for this search component\n      const searchInput = document.getElementById(\\`search-input-\\${id}\\`);\n      const searchButton = document.getElementById(\\`search-button-\\${id}\\`);\n      const searchResults = document.getElementById(\\`search-results-\\${id}\\`);\n      const resultsContent = document.getElementById(\\`results-content-\\${id}\\`);\n      const useLocationBtn = document.getElementById(\\`use-location-\\${id}\\`);\n      const searchForm = document.getElementById(\\`search-form-\\${id}\\`);\n      \n      // Exit if required elements not found\n      if (!searchInput || !searchResults || !resultsContent) {\n        console.error(\\`Missing required elements for search component \\${id}\\`);\n        return;\n      }\n      \n      // Store global vars\n      let searchTimeout;\n      let cityStatePairs = []; // Will be populated from the server\n      \n      // Helper functions for UI feedback\n      function showLoading(isLoading) {\n        const searchIcon = document.getElementById(\\`search-icon-\\${id}\\`);\n        const spinner = document.getElementById(\\`spinner-\\${id}\\`);\n        const searchButton = document.getElementById(\\`search-button-\\${id}\\`);\n        \n        if (isLoading) {\n          // Show loading state\n          if (searchIcon && spinner) {\n            searchIcon.classList.add(\'hidden\');\n            spinner.classList.remove(\'hidden\');\n          }\n          if (searchButton) {\n            searchButton.setAttribute(\'disabled\', \'true\');\n          }\n        } else {\n          // Remove loading state\n          if (searchIcon && spinner) {\n            searchIcon.classList.remove(\'hidden\');\n            spinner.classList.add(\'hidden\');\n          }\n          if (searchButton) {\n            searchButton.removeAttribute(\'disabled\');\n          }\n        }\n      }\n      \n      function showLocationLoading(isLoading) {\n        const locationIcon = document.getElementById(\\`location-icon-\\${id}\\`);\n        const locationSpinner = document.getElementById(\\`location-spinner-\\${id}\\`);\n        const useLocationBtn = document.getElementById(\\`use-location-\\${id}\\`);\n        \n        if (isLoading) {\n          // Show loading state\n          if (locationIcon && locationSpinner) {\n            locationIcon.classList.add(\'hidden\');\n            locationSpinner.classList.remove(\'hidden\');\n          }\n          if (useLocationBtn) {\n            useLocationBtn.setAttribute(\'disabled\', \'true\');\n          }\n        } else {\n          // Remove loading state\n          if (locationIcon && locationSpinner) {\n            locationIcon.classList.remove(\'hidden\');\n            locationSpinner.classList.add(\'hidden\');\n          }\n          if (useLocationBtn) {\n            useLocationBtn.removeAttribute(\'disabled\');\n          }\n        }\n      }\n      \n      function showError(message) {\n        const errorEl = document.getElementById(\\`search-error-\\${id}\\`);\n        if (errorEl) {\n          errorEl.textContent = message;\n          errorEl.classList.remove(\'hidden\');\n        }\n      }\n      \n      function hideError() {\n        const errorEl = document.getElementById(\\`search-error-\\${id}\\`);\n        if (errorEl) {\n          errorEl.classList.add(\'hidden\');\n        }\n      }\n      \n      // Fetch city data from the server for client-side search\n      fetch(\'/api/cities-data\')\n        .then(response => response.json())\n        .then(data => {\n          cityStatePairs = data;\n          console.log(\\`Loaded \\${cityStatePairs.length} cities for search\\`);\n        })\n        .catch(error => {\n          console.error(\'Failed to load city data:\', error);\n        });\n         \n      // Use location button\n      if (useLocationBtn) {\n        useLocationBtn.addEventListener(\'click\', async (e) => {\n          e.preventDefault();\n          hideError();\n          showLocationLoading(true);\n          \n          try {\n            const location = await getCurrentLocation();\n            if (!location) {\n              throw new Error("Could not determine your location");\n            }\n            \n            const { latitude, longitude } = location;\n            const geoData = await reverseGeocode(latitude, longitude);\n            \n            if (!geoData) {\n              throw new Error("Could not find your location");\n            }\n            \n            // Set the search input to the found location\n            searchInput.value = \\`\\${geoData.city}, \\${geoData.state}\\`;\n            \n            // Trigger a search with this location\n            handleSearch();\n          } catch (error) {\n            console.error("Location error:", error);\n            showError(error instanceof Error ? error.message : "Could not access your location");\n          } finally {\n            showLocationLoading(false);\n          }\n        });\n      }\n  \n      // Search for matching cities/states\n      function searchLocations(query) {\n        console.log(\\`Searching for: "\\${query}"\\`);\n        query = query.toLowerCase().trim();\n        \n        if (!query) return [];\n        \n        // Check for zip code\n        const isZipCode = /^\\\\d{5}(-\\\\d{4})?$/.test(query);\n        if (isZipCode) {\n          return [{\n            text: \\`Find recycling centers near \\${query}\\`,\n            type: \'zip\',\n            zip: query\n          }];\n        }\n        \n        // Try to find exact and partial matches\n        const exactMatches = [];\n        const partialMatches = [];\n        \n        // Check if cityStatePairs is available and not empty\n        if (!cityStatePairs || cityStatePairs.length === 0) {\n          showError("Search data is still loading. Please try again in a moment.");\n          return [];\n        }\n        \n        cityStatePairs.forEach(pair => {\n          const cityLower = pair.city.toLowerCase();\n          const stateLower = pair.state.toLowerCase();\n          \n          // Check for exact match\n          if (cityLower === query || stateLower === query) {\n            exactMatches.push({...pair, type: \'city\'});\n          }\n          // Check for partial match\n          else if (cityLower.includes(query) || stateLower.includes(query)) {\n            partialMatches.push({...pair, type: \'city\'});\n          }\n        });\n        \n        // Combine and limit results\n        return [...exactMatches, ...partialMatches].slice(0, 8);\n      }\n      \n      // Display search suggestions\n      function showSuggestions(suggestions) {\n        console.log(\\`Found \\${suggestions.length} suggestions\\`);\n        \n        if (suggestions.length === 0) {\n          searchResults?.classList.add(\'hidden\');\n          return;\n        }\n        \n        // Generate suggestion HTML\n        if (resultsContent) {\n          resultsContent.innerHTML = suggestions\n            .map(suggestion => {\n              if (suggestion.type === \'zip\') {\n                return \\`\n                  <button\n                    type="button"\n                    class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group suggestion-item"\n                    data-type="zip"\n                    data-zip="\\${suggestion.zip}"\n                  >\n                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                    </svg>\n                    <span>\\${suggestion.text}</span>\n                  </button>\n                \\`;\n              }\n              \n              return \\`\n                <button\n                  type="button"\n                  class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group suggestion-item"\n                  data-type="city" \n                  data-url="\\${suggestion.url}"\n                >\n                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                  </svg>\n                  <span>\\${suggestion.city}, \\${suggestion.state}</span>\n                </button>\n              \\`;\n            })\n            .join(\'\');\n            \n          // Add click handlers for suggestions\n          resultsContent.querySelectorAll(\'.suggestion-item\').forEach(button => {\n            button.addEventListener(\'click\', (e) => {\n              e.preventDefault();\n              const type = button.getAttribute(\'data-type\');\n              \n              if (type === \'city\') {\n                const url = button.getAttribute(\'data-url\');\n                if (url) window.location.href = url;\n              } else if (type === \'zip\') {\n                const zip = button.getAttribute(\'data-zip\');\n                if (zip) handleZipSearch(zip);\n              }\n            });\n          });\n        }\n        \n        // Show results dropdown\n        searchResults?.classList.remove(\'hidden\');\n      }\n      \n      // Handle a zip code search\n      async function handleZipSearch(zipCode) {\n        console.log(\\`Searching for zip code: \\${zipCode}\\`);\n        showLoading(true);\n        hideError();\n        \n        try {\n          // Show loading state\n          if (resultsContent) {\n            resultsContent.innerHTML = \\`\n              <div class="px-4 py-3">\n                <svg class="animate-spin h-5 w-5 text-gray-400 inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\n                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\n                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\n                </svg>\n                <span>Finding recycling centers near \\${zipCode}...</span>\n              </div>\n            \\`;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          \n          // Call our zipcode API\n          const apiUrl = new URL(\'/api/zipcode\', window.location.origin);\n          // Add cache busting query parameter to the URL\n          apiUrl.searchParams.append(\'_cb\', Date.now() + \'-\' + Math.random().toString(36).substr(2, 9));\n          \n          const response = await fetch(apiUrl, {\n            method: \'POST\',\n            headers: {\n              \'Accept\': \'application/json\',\n              \'Content-Type\': \'application/json\',\n              \'Cache-Control\': \'no-cache, no-store, must-revalidate\',\n              \'Pragma\': \'no-cache\',\n              \'X-Cache-Bust\': Date.now().toString()\n            },\n            cache: \'no-store\',\n            body: JSON.stringify({ \n              zip: zipCode, \n              _timestamp: Date.now(),\n              _random: Math.random().toString(36).substring(2)\n            }),\n          });\n          \n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || \\`HTTP error \\${response.status}\\`);\n          }\n          \n          const data = await response.json();\n          console.log(\'Zip code API response:\', data);\n          \n          if (!data || !data.city || !data.state) {\n            throw new Error(\\`Unable to find location data for zip code \\${zipCode}\\`);\n          }\n          \n          console.log(\\`Zip code \\${zipCode} resolves to \\${data.city}, \\${data.state}\\`);\n          \n          // First, try to find an exact match based on city and state\n          const exactMatch = cityStatePairs.find(pair => \n            pair.city.toLowerCase() === data.city.toLowerCase() &&\n            pair.state.toLowerCase() === data.state.toLowerCase()\n          );\n          \n          if (exactMatch) {\n            console.log(\'Found exact city match:\', exactMatch);\n            window.location.href = exactMatch.url;\n            return;\n          }\n          \n          console.log(\\`No exact match found for \\${data.city}, \\${data.state}. Looking for nearest city...\\`);\n          \n          // If no exact match, find the nearest city based on coordinates\n          if (data.coordinates && data.coordinates.lat && data.coordinates.lng) {\n            console.log(\\`Using coordinates: lat=\\${data.coordinates.lat}, lng=\\${data.coordinates.lng}\\`);\n            \n            // First try cities in the same state\n            const sameStateMatches = cityStatePairs.filter(pair => \n              pair.state.toLowerCase() === data.state.toLowerCase()\n            );\n            \n            console.log(\\`Found \\${sameStateMatches.length} cities in \\${data.state}\\`);\n            \n            if (sameStateMatches.length > 0) {\n              // Find if any cities have coordinates\n              const citiesWithCoords = sameStateMatches.filter(city => city.coordinates && \n                                                             city.coordinates.lat && \n                                                             city.coordinates.lng);\n              \n              console.log(\\`\\${citiesWithCoords.length} cities have coordinates information\\`);\n              \n              if (citiesWithCoords.length > 0) {\n                // Find the nearest city in the same state\n                let nearestCity = citiesWithCoords[0];\n                let shortestDistance = calculateDistance(\n                  data.coordinates, \n                  citiesWithCoords[0].coordinates\n                );\n                \n                console.log(\\`Initial nearest city: \\${nearestCity.city} at \\${shortestDistance.toFixed(2)} km\\`);\n                \n                for (const city of citiesWithCoords.slice(1)) {\n                  const distance = calculateDistance(data.coordinates, city.coordinates);\n                  console.log(\\`Checking \\${city.city}: \\${distance.toFixed(2)} km\\`);\n                  \n                  if (distance < shortestDistance) {\n                    shortestDistance = distance;\n                    nearestCity = city;\n                    console.log(\\`New nearest city: \\${nearestCity.city} at \\${shortestDistance.toFixed(2)} km\\`);\n                  }\n                }\n                \n                console.log(\\`Redirecting to nearest city: \\${nearestCity.city}, \\${nearestCity.state} (\\${shortestDistance.toFixed(2)} km away)\\`);\n                window.location.href = nearestCity.url;\n                return;\n              } else {\n                console.log(\'No cities with coordinates found in the same state. Using first city in state as fallback.\');\n                // If no cities have coordinates, just use the first city in the state\n                window.location.href = sameStateMatches[0].url;\n                return;\n              }\n            }\n          } else {\n            console.log(\'No coordinates available in the response. Falling back to fuzzy matching.\');\n          }\n          \n          // Fall back to fuzzy name matching\n          const cityMatches = cityStatePairs.filter(pair => \n            pair.state.toLowerCase() === data.state.toLowerCase() &&\n            (\n              pair.city.toLowerCase().includes(data.city.toLowerCase()) ||\n              data.city.toLowerCase().includes(pair.city.toLowerCase())\n            )\n          );\n          \n          console.log(\\`Found \\${cityMatches.length} cities with fuzzy name matching\\`);\n          \n          if (cityMatches.length === 1) {\n            // If only one match, redirect directly\n            console.log(\\`Single fuzzy match found: \\${cityMatches[0].city}. Redirecting.\\`);\n            window.location.href = cityMatches[0].url;\n            return;\n          } else if (cityMatches.length > 1 && resultsContent) {\n            // Show multiple matches\n            console.log(\\`Multiple matches found. Showing options to user.\\`);\n            resultsContent.innerHTML = \\`\n              <div class="px-4 py-3 text-gray-600">\n                <p>Found recycling centers near \\${zipCode} (\\${data.city}, \\${data.state}):</p>\n              </div>\n              \\${cityMatches.map(match => \\`\n                <button\n                  type="button"\n                  class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group"\n                  data-url="\\${match.url}"\n                >\n                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />\n                  </svg>\n                  <span>\\${match.city}, \\${match.state}</span>\n                </button>\n              \\`).join(\'\')}\n            \\`;\n            \n            // Add click handlers\n            resultsContent.querySelectorAll(\'button[data-url]\').forEach(button => {\n              button.addEventListener(\'click\', () => {\n                const url = button.getAttribute(\'data-url\');\n                if (url) window.location.href = url;\n              });\n            });\n          } else if (resultsContent) {\n            // As a last resort, get ANY city in the same state\n            const anyCityInState = cityStatePairs.find(pair => \n              pair.state.toLowerCase() === data.state.toLowerCase()\n            );\n            \n            if (anyCityInState) {\n              console.log(\\`No direct matches found but found a city in the same state: \\${anyCityInState.city}. Redirecting.\\`);\n              window.location.href = anyCityInState.url;\n              return;\n            }\n            \n            // If all else fails, tell the user no centers were found for that zip code\n            console.log(\\`No recycling centers found for zip code \\${zipCode}\\`);\n            throw new Error(\\`No recycling centers found near \\${zipCode} (\\${data.city}, \\${data.state})\\`);\n          }\n        } catch (error) {\n          console.error(\'Error searching by zip:\', error);\n          if (resultsContent) {\n            resultsContent.innerHTML = \\`\n              <div class="px-4 py-3 text-red-500">\n                <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n                </svg>\n                \\${error instanceof Error ? error.message : \'Error searching by zip code. Please try a city name instead.\'}\n              </div>\n            \\`;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError(error instanceof Error ? error.message : \'Error searching by zip code\');\n        } finally {\n          showLoading(false);\n        }\n      }\n      \n      // Calculate distance between two coordinate points\n      function calculateDistance(point1, point2) {\n        const R = 6371; // Earth\'s radius in kilometers\n        const dLat = toRad(point2.lat - point1.lat);\n        const dLon = toRad(point2.lng - point1.lng);\n        const lat1 = toRad(point1.lat);\n        const lat2 = toRad(point2.lat);\n\n        const a =\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c;\n      }\n\n      function toRad(value) {\n        return (value * Math.PI) / 180;\n      }\n      \n      // Handle main search submission\n      function handleSearch() {\n        console.log(\'Search button clicked\');\n        const query = searchInput.value.trim();\n        hideError();\n        showLoading(true);\n        \n        if (query.length < 2) {\n          if (resultsContent) {\n            resultsContent.innerHTML = \\`<div class="px-4 py-3 text-gray-600">Please enter a city or zip code.</div>\\`;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError("Please enter at least 2 characters");\n          showLoading(false);\n          return;\n        }\n        \n        // Check for numeric input that might be a zip code\n        const isAllDigits = /^\\\\d+$/.test(query);\n        if (isAllDigits && query.length !== 5) {\n          if (resultsContent) {\n            resultsContent.innerHTML = \\`\n              <div class="px-4 py-3 text-red-500">\n                <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n                </svg>\n                Zip codes must be 5 digits. Please enter a valid zip code.\n              </div>\n            \\`;\n          }\n          searchResults?.classList.remove(\'hidden\');\n          showError("Zip codes must be 5 digits");\n          showLoading(false);\n          return;\n        }\n        \n        // Check for valid zip code\n        const isZipCode = /^\\\\d{5}(-\\\\d{4})?$/.test(query);\n        if (isZipCode) {\n          handleZipSearch(query);\n          return;\n        }\n        \n        // Try to find city match\n        const exactMatch = cityStatePairs.find(pair => \n          pair.city.toLowerCase() === query.toLowerCase() ||\n          pair.state.toLowerCase() === query.toLowerCase() ||\n          \\`\\${pair.city.toLowerCase()}, \\${pair.state.toLowerCase()}\\` === query.toLowerCase()\n        );\n        \n        if (exactMatch) {\n          window.location.href = exactMatch.url;\n          return;\n        }\n        \n        // Show suggestions if any exist\n        const suggestions = searchLocations(query);\n        if (suggestions.length > 0) {\n          showSuggestions(suggestions);\n          return;\n        }\n        \n        // No matches found\n        if (resultsContent) {\n          resultsContent.innerHTML = \\`\n            <div class="px-4 py-3 text-red-500">\n              <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n              </svg>\n              No recycling centers found for "\\${query}". Please try another city or zip code.\n            </div>\n          \\`;\n        }\n        searchResults?.classList.remove(\'hidden\');\n        showError(\\`No recycling centers found for "\\${query}"\\`);\n        showLoading(false);\n      }\n      \n      // Set up event listeners\n      \n      // Input change - show suggestions as you type\n      if (searchInput) {\n        searchInput.addEventListener(\'input\', () => {\n          console.log(\\`Input changed: \\${searchInput.value}\\`);\n          if (searchTimeout) {\n            clearTimeout(searchTimeout);\n          }\n          \n          const query = searchInput.value.trim();\n          if (query.length < 2) {\n            searchResults?.classList.add(\'hidden\');\n            return;\n          }\n          \n          searchTimeout = setTimeout(() => {\n            const suggestions = searchLocations(query);\n            showSuggestions(suggestions);\n          }, 150);\n        });\n        \n        // Handle Enter key press\n        searchInput.addEventListener(\'keydown\', (e) => {\n          if (e.key === \'Enter\') {\n            e.preventDefault();\n            handleSearch();\n          } else if (e.key === \'Escape\') {\n            searchResults?.classList.add(\'hidden\');\n          }\n        });\n      }\n      \n      // Search button click\n      if (searchButton) {\n        searchButton.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          handleSearch();\n        });\n      }\n      \n      // Form submit\n      if (searchForm) {\n        searchForm.addEventListener(\'submit\', (e) => {\n          e.preventDefault();\n          handleSearch();\n          return false;\n        });\n      }\n      \n      // Close suggestions when clicking outside\n      document.addEventListener(\'click\', (e) => {\n        const target = e.target;\n        if (searchInput && searchResults && !searchInput.contains(target) && !searchResults.contains(target)) {\n          searchResults.classList.add(\'hidden\');\n        }\n      });\n      \n      // Instead of using imported data, re-use the initial city state pairs that are already defined\n      // in the component.\n      try {\n        if (typeof window !== \'undefined\' && window.__CITY_STATE_PAIRS__) {\n          cityStatePairs = window.__CITY_STATE_PAIRS__;\n          console.log(\\`Using \\${cityStatePairs.length} pre-loaded city pairs\\`);\n        }\n      } catch (e) {\n        console.error(\'Error accessing city data:\', e);\n      }\n    });\n  });\n<\/script> <!-- Add global data for client-side access --> <script type="module">', "\n  // Make city data available to client-side scripts\n  window.__CITY_STATE_PAIRS__ = cityStatePairs;\n<\/script>"])), maybeRenderHead(), addAttribute(["relative", className], "class:list"), addAttribute(id, "data-search-component"), addAttribute(`search-form-${id}`, "id"), addAttribute(`search-input-${id}`, "id"), addAttribute([
    "block w-full border-0 px-4 py-3 text-gray-900 shadow-sm placeholder:text-gray-400 sm:text-sm sm:leading-6 focus:ring-2 focus:ring-green-500 focus:border-transparent",
    variant === "hero" ? "rounded-l-lg" : "rounded-full pl-10"
  ], "class:list"), addAttribute(placeholder, "placeholder"), variant === "hero" && renderTemplate`<button${addAttribute(`search-button-${id}`, "id")} type="button" class="inline-flex items-center justify-center px-6 py-3 bg-green-600 text-white rounded-r-lg hover:bg-green-700 transition-colors"> <svg${addAttribute(`search-icon-${id}`, "id")} xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path> </svg> <svg${addAttribute(`spinner-${id}`, "id")} class="animate-spin h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> <span class="ml-2 font-medium">Search</span> </button>`, addAttribute(`use-location-${id}`, "id"), addAttribute([
    "flex items-center text-gray-400 hover:text-gray-500",
    variant === "hero" ? "absolute right-[120px] top-0 bottom-0 pr-3" : "absolute right-3 top-1/2 -translate-y-1/2"
  ], "class:list"), addAttribute(`location-icon-${id}`, "id"), addAttribute(`location-spinner-${id}`, "id"), addAttribute(`search-error-${id}`, "id"), addAttribute(`search-results-${id}`, "id"), addAttribute(`results-content-${id}`, "id"), defineScriptVars({ getCurrentLocation, reverseGeocode }), defineScriptVars({ cityStatePairs }));
}, "/home/adam/Projects/ewaste-dir/src/components/SearchInput.astro", void 0);

const $$Header = createComponent(async ($$result, $$props, $$slots) => {
  await getFeaturedStates();
  return renderTemplate`${maybeRenderHead()}<header class="fixed w-full bg-white/90 backdrop-blur-sm shadow-sm z-50 transition-all duration-300" id="header"> <div class="container mx-auto px-4 py-4 flex justify-between items-center"> <a href="/" class="text-2xl font-display font-bold text-primary-900 flex items-center"> <span class="text-accent-600">Recycle</span>OldTech
</a> <nav class="hidden md:flex space-x-6"> <a href="/" class="text-gray-700 hover:text-primary-700 transition-colors font-medium">Home</a> <a href="/about" class="text-gray-700 hover:text-primary-700 transition-colors font-medium">About</a> <a href="/blog" class="text-gray-700 hover:text-primary-700 transition-colors font-medium">Blog</a> <a href="/contact" class="text-gray-700 hover:text-primary-700 transition-colors font-medium">Contact</a> </nav> <div class="flex items-center space-x-4"> <div class="relative hidden md:block w-64"> ${renderComponent($$result, "SearchInput", $$SearchInput, { "variant": "nav" })} </div> <button class="md:hidden text-gray-700" id="mobile-menu-button"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path> </svg> </button> </div> </div> <!-- Mobile Menu --> <div class="md:hidden bg-white shadow-lg absolute w-full left-0 top-full transform -translate-y-full opacity-0 invisible transition-all duration-300" id="mobile-menu"> <div class="px-4 py-3"> ${renderComponent($$result, "SearchInput", $$SearchInput, { "variant": "nav" })} </div> <div class="border-t border-gray-200"> <a href="/" class="block px-4 py-3 text-gray-800 hover:bg-primary-50 hover:text-primary-700">Home</a> <a href="/about" class="block px-4 py-3 text-gray-800 hover:bg-primary-50 hover:text-primary-700">About</a> <a href="/blog" class="block px-4 py-3 text-gray-800 hover:bg-primary-50 hover:text-primary-700">Blog</a> <a href="/contact" class="block px-4 py-3 text-gray-800 hover:bg-primary-50 hover:text-primary-700">Contact</a> </div> </div> </header> ${renderScript($$result, "/home/adam/Projects/ewaste-dir/src/components/Header.astro?astro&type=script&index=0&lang.ts")}`;
}, "/home/adam/Projects/ewaste-dir/src/components/Header.astro", void 0);

const $$Footer = createComponent(($$result, $$props, $$slots) => {
  const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  return renderTemplate`${maybeRenderHead()}<footer class="bg-gray-900 text-white py-12"> <div class="container mx-auto px-4"> <div class="grid grid-cols-1 md:grid-cols-4 gap-8"> <div class="md:col-span-1"> <div class="text-2xl font-display font-bold mb-4"> <span class="text-accent-400">Recycle</span>OldTech
</div> <p class="text-gray-300 mb-4">Your comprehensive guide to explore states and cities across the country.</p> <div class="flex space-x-4"> <a href="#" class="text-gray-300 hover:text-white transition-colors"> <span class="sr-only">Facebook</span> <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"> <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd"></path> </svg> </a> <a href="#" class="text-gray-300 hover:text-white transition-colors"> <span class="sr-only">Instagram</span> <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"> <path fill-rule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clip-rule="evenodd"></path> </svg> </a> <a href="#" class="text-gray-300 hover:text-white transition-colors"> <span class="sr-only">Twitter</span> <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"> <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path> </svg> </a> </div> </div> <div> <h3 class="text-lg font-bold mb-4">Quick Links</h3> <ul class="space-y-2"> <li><a href="/" class="text-gray-300 hover:text-white transition-colors">Home</a></li> <li><a href="/about" class="text-gray-300 hover:text-white transition-colors">About</a></li> <li><a href="/blog" class="text-gray-300 hover:text-white transition-colors">Blog</a></li> <li><a href="/contact" class="text-gray-300 hover:text-white transition-colors">Contact</a></li> </ul> </div> <div> <h3 class="text-lg font-bold mb-4">Popular States</h3> <ul class="space-y-2"> <li><a href="/states/california" class="text-gray-300 hover:text-white transition-colors">California</a></li> <li><a href="/states/new-york" class="text-gray-300 hover:text-white transition-colors">New York</a></li> <li><a href="/states/texas" class="text-gray-300 hover:text-white transition-colors">Texas</a></li> <li><a href="/states/florida" class="text-gray-300 hover:text-white transition-colors">Florida</a></li> </ul> </div> <div> <h3 class="text-lg font-bold mb-4">Popular Cities</h3> <ul class="space-y-2"> <li><a href="/states/california/los-angeles" class="text-gray-300 hover:text-white transition-colors">Los Angeles</a></li> <li><a href="/states/new-york/new-york" class="text-gray-300 hover:text-white transition-colors">New York City</a></li> <li><a href="/states/texas/austin" class="text-gray-300 hover:text-white transition-colors">Austin</a></li> <li><a href="/states/florida/miami" class="text-gray-300 hover:text-white transition-colors">Miami</a></li> </ul> </div> </div> <div class="mt-8 pt-8 border-t border-gray-800 text-center"> <p class="text-gray-400">© ${currentYear} Creative Bandit, LLC. All rights reserved.</p> </div> </div> </footer>`;
}, "/home/adam/Projects/ewaste-dir/src/components/Footer.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://www.recycleoldtech.com");
const $$Layout = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Layout;
  const { title, description, ogImage } = Astro2.props;
  const metaDescription = description || "Find electronics recycling centers near you. Get directions, contact information, and more.";
  const defaultOgImage = "/images/default-og.png";
  const currentUrl = new URL(Astro2.request.url);
  const ogImageUrl = ogImage ? getAbsoluteUrl(ogImage) : getAbsoluteUrl(defaultOgImage);
  const canonicalUrl = getCanonicalUrl(currentUrl);
  const GOOGLE_MAPS_API_KEY = "";
  return renderTemplate(_a || (_a = __template(['<html lang="en" class="scroll-smooth"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="generator"', '><meta name="description"', '><link rel="canonical"', '><!-- Open Graph / Facebook --><meta property="og:type" content="website"><meta property="og:url"', '><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><!-- Twitter --><meta property="twitter:card" content="summary_large_image"><meta property="twitter:url"', '><meta property="twitter:title"', '><meta property="twitter:description"', '><meta property="twitter:image"', '><!-- Google Fonts --><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@600;700;800&display=swap" rel="stylesheet"><title>', "</title><!-- Make API key available to client scripts --><script>(function(){", "\n      // Store API key in a global variable\n      window.GOOGLE_MAPS_API_KEY = GOOGLE_MAPS_API_KEY;\n    })();</script><!-- Initialize Google Maps --><script>\n      function initializeMap() {\n        // Create and dispatch the ready event\n        const event = new Event('google-maps-ready');\n        window.dispatchEvent(event);\n      }\n      // Make the function globally available\n      window.initializeMap = initializeMap;\n    </script><script async defer", "></script>", '</head> <body class="min-h-screen flex flex-col bg-white"> ', ' <main class="flex-grow"> ', " </main> ", ' <!-- Back to top button --> <button id="back-to-top" class="fixed bottom-6 right-6 bg-primary-700 text-white rounded-full p-3 shadow-lg opacity-0 invisible transition-all duration-300 hover:bg-primary-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 z-50"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path> </svg> <span class="sr-only">Back to top</span> </button> ', " </body> </html>"])), addAttribute(Astro2.generator, "content"), addAttribute(metaDescription, "content"), addAttribute(canonicalUrl, "href"), addAttribute(canonicalUrl, "content"), addAttribute(title, "content"), addAttribute(metaDescription, "content"), addAttribute(ogImageUrl, "content"), addAttribute(canonicalUrl, "content"), addAttribute(title, "content"), addAttribute(metaDescription, "content"), addAttribute(ogImageUrl, "content"), title, defineScriptVars({ GOOGLE_MAPS_API_KEY }), addAttribute(`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&callback=initializeMap`, "src"), renderHead(), renderComponent($$result, "Header", $$Header, {}), renderSlot($$result, $$slots["default"]), renderComponent($$result, "Footer", $$Footer, {}), renderScript($$result, "/home/adam/Projects/ewaste-dir/src/layouts/Layout.astro?astro&type=script&index=0&lang.ts"));
}, "/home/adam/Projects/ewaste-dir/src/layouts/Layout.astro", void 0);

export { $$Layout as $, $$SearchInput as a };

---
import type { RecyclingCenter } from '../types/supabase';

interface Props {
  cityName: string;
  state: string;
  centers: RecyclingCenter[];
  localData?: {
    regulations?: any;
    stats?: any;
  };
  showNearbyMessage?: boolean;
}

const { cityName, state, centers, localData, showNearbyMessage } = Astro.props;

// Helper functions for essential insights only
function getTopRatedCenter(centers: RecyclingCenter[]) {
  return centers
    .filter(c => c.rating && Number(c.rating) > 0)
    .sort((a, b) => Number(b.rating) - Number(a.rating))[0];
}

function getCityGovernmentCenter(centers: RecyclingCenter[]) {
  return centers.find(c => 
    c.name.toLowerCase().includes('city') || 
    c.name.toLowerCase().includes('municipal') ||
    c.name.toLowerCase().includes('public works') ||
    c.name.toLowerCase().includes('government')
  );
}

function getChainCenters(centers: RecyclingCenter[]) {
  const chains = ['best buy', 'staples', 'goodwill', 'walmart', 'target'];
  return centers.filter(c => 
    chains.some(chain => c.name.toLowerCase().includes(chain))
  );
}

// Generate only 2 essential FAQs based on local context
function generateEssentialFAQs(cityName: string, state: string, centers: RecyclingCenter[], localData?: any) {
  const faqs = [];
  const centerCount = centers.length;
  const topCenter = getTopRatedCenter(centers);
  const cityCenter = getCityGovernmentCenter(centers);
  
  // Always include availability/count question
  if (centerCount === 1) {
    faqs.push({
      question: `Where can I recycle electronics in ${cityName}?`,
      answer: `${cityName} has 1 electronics recycling center: ${centers[0].name} at ${centers[0].full_address}. ${centers[0].phone ? `Call ${centers[0].phone} to` : 'Contact them to'} confirm accepted items and hours.`
    });
  } else {
    faqs.push({
      question: `How many electronics recycling options are available in ${cityName}?`,
      answer: `${cityName} has ${centerCount} electronics recycling centers accepting computers, phones, TVs, and other devices. ${topCenter ? `${topCenter.name} has the highest rating (${topCenter.rating} stars).` : ''} Call ahead to confirm specific items and fees.`
    });
  }

  // Add one practical question based on local context
  if (cityCenter) {
    faqs.push({
      question: `Does ${cityName} offer city-run electronics recycling?`,
      answer: `Yes, ${cityCenter.name} provides municipal electronics recycling services. City programs often offer free drop-off for residents and may accept bulk items.`
    });
  } else if (localData?.regulations?.has_ewaste_ban) {
    faqs.push({
      question: `Are there electronics disposal laws in ${cityName}?`,
      answer: `${state} prohibits electronics in regular trash. All computers, TVs, phones and other electronics must be recycled through certified facilities. Use the centers listed above to comply with local regulations.`
    });
  } else {
    faqs.push({
      question: `How should I prepare electronics for recycling?`,
      answer: `Remove all personal data (back up files and factory reset), remove batteries when possible, and call ahead to confirm accepted items and any fees. Most centers also offer data destruction services.`
    });
  }

  return faqs; // Return only 2 FAQs
}

// Generate brief, essential insights only
const topRatedCenter = getTopRatedCenter(centers);
const cityGovCenter = getCityGovernmentCenter(centers);
const chainCenters = getChainCenters(centers);
const essentialFAQs = generateEssentialFAQs(cityName, state, centers, localData);

// Generate only key highlights (max 2-3 brief points)
const keyHighlights = [];
if (topRatedCenter) {
  keyHighlights.push(`${topRatedCenter.name} is the top-rated option (${topRatedCenter.rating}★)`);
}
if (cityGovCenter) {
  keyHighlights.push(`City-run facility available: ${cityGovCenter.name}`);
}
if (chainCenters.length > 0) {
  keyHighlights.push(`Retail drop-off options: ${chainCenters[0].name.split(' ')[0]}${chainCenters.length > 1 ? ` and ${chainCenters.length - 1} others` : ''}`);
}
---

<!-- Brief City Overview - Essential Info Only -->
<div class="bg-gradient-to-r from-blue-50 to-green-50 border border-gray-200 rounded-lg p-6 mb-6">
  <div class="flex items-center mb-3">
    <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
      <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
      </svg>
    </div>
    <h2 class="text-xl font-semibold text-gray-900">
      Electronics Recycling in {cityName}
    </h2>
  </div>
  
  <p class="text-gray-700 mb-3">
    {showNearbyMessage 
      ? `${centers.length} electronics recycling centers serve the ${cityName} area, accepting computers, phones, TVs, and other devices.`
      : `${cityName} has ${centers.length} electronics recycling ${centers.length === 1 ? 'center' : 'centers'} for safe disposal of computers, phones, TVs, and other electronic devices.`
    }
  </p>
    
  {keyHighlights.length > 0 && (
    <div class="bg-white/60 p-3 rounded border-l-3 border-blue-400">
      <ul class="text-sm text-blue-800 space-y-1">
        {keyHighlights.map(highlight => (
          <li>• {highlight}</li>
        ))}
      </ul>
    </div>
  )}
</div>

<!-- Essential FAQ Section - Only 2 Questions -->
<div class="bg-white border border-gray-200 rounded-lg p-6 mb-6">
  <div class="flex items-center mb-4">
    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3">
      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
    </div>
    <h3 class="text-lg font-semibold text-gray-900">Quick Questions</h3>
  </div>
  <div class="space-y-4">
    {essentialFAQs.map((faq, index) => (
      <div class="border-l-3 border-green-400 pl-4 bg-green-50/30 p-3 rounded-r">
        <h4 class="font-medium text-gray-800 mb-1 text-sm">{faq.question}</h4>
        <p class="text-gray-700 text-sm">{faq.answer}</p>
      </div>
    ))}
  </div>
</div> 

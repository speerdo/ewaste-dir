---
import { Image } from 'astro:assets';
import SearchInput from './SearchInput.astro';
import { getCurrentLocation, reverseGeocode } from '../lib/geocoding';
import { normalizeForUrl } from '../lib/supabase';

// Featured cities data
const featuredCities = [
  { 
    state: "Texas", 
    city: "Austin", 
    image: "/images/austin.jpg",
    description: "Discover eco-friendly electronics recycling in the heart of Texas tech. Sustainable solutions for all your e-waste needs."
  },
  { 
    state: "New York", 
    city: "New York", 
    image: "/images/new_york_city.jpg",
    description: "Discover e-waste recycling locations across the five boroughs. Safe disposal solutions for all electronic devices."
  },
  { 
    state: "Florida", 
    city: "Miami", 
    image: "/images/miami.jpg",
    description: "Find responsible electronics recycling centers in the Magic City. Professional e-waste disposal for businesses and residents."
  }
];
---

<section class="relative bg-gradient-to-b from-green-900 to-green-800 py-24 overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 opacity-10">
    <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
      <defs>
        <pattern id="grid" width="8" height="8" patternUnits="userSpaceOnUse">
          <path d="M0 0h8v8H0V0z" fill="none" stroke="currentColor" stroke-width="0.5"/>
        </pattern>
      </defs>
      <rect width="100%" height="100%" fill="url(#grid)"/>
    </svg>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-4xl mx-auto text-center mb-16 mt-10">
      <h1 class="text-4xl md:text-5xl lg:text-6xl font-display font-bold text-white mb-6">
        Find Electronics Recycling Centers Near You
      </h1>
      <p class="text-lg md:text-xl text-green-100 mb-8">
        Responsibly dispose of your e-waste at certified recycling centers across the United States.
      </p>
      
      <!-- Search Bar -->
      <div class="mb-8">
        <SearchInput variant="hero" />
      </div>

      <div class="flex flex-wrap gap-4 justify-center">
        <a 
          href="#state-directory" 
          class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-green-600 hover:bg-green-700 transition-colors"
        >
          Browse by State
        </a>
        <button 
          id="find-nearest"
          class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-green-100 bg-green-800 hover:bg-green-700 transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          </svg>
          Find Nearest Center
        </button>
      </div>
    </div>

    <!-- Featured Cities -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      {featuredCities.map(city => (
        <a 
          href={`/states/${normalizeForUrl(city.state)}/${normalizeForUrl(city.city)}`} 
          class="group relative rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all"
        >
          <img 
            src={city.image} 
            alt={`${city.city}, ${city.state}`} 
            class="w-full h-64 object-cover transition-transform duration-700 group-hover:scale-110"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
          <div class="absolute bottom-0 left-0 right-0 p-4">
            <h3 class="text-xl font-bold text-white mb-1">{city.city}, {city.state}</h3>
            <p class="text-sm text-gray-200 line-clamp-2">{city.description}</p>
          </div>
        </a>
      ))}
    </div>
  </div>
</section>

<script>
  import { getCurrentLocation, reverseGeocode } from '../lib/geocoding';
  
  const findNearestBtn = document.getElementById('find-nearest') as HTMLButtonElement;
  
  findNearestBtn?.addEventListener('click', async () => {
    // Show loading state
    const originalContent = findNearestBtn.innerHTML;
    findNearestBtn.innerHTML = `
      <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Finding nearest center...
    `;
    findNearestBtn.disabled = true;

    try {
      // Get current location
      const coordinates = await getCurrentLocation();
      // console.log('Current location:', coordinates);

      // Get city and state from coordinates
      const location = await reverseGeocode(coordinates);
      // console.log('Location found:', location);

      if (!location.city || !location.state) {
        throw new Error('Could not determine your city and state');
      }

      // Generate the URLs
      // Normalize city for URL - handle special characters like Ã±
      const stateSlug = location.state.toLowerCase().replace(/\s+/g, '-');
      const citySlug = location.city
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remove diacritical marks
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');

      // Redirect to city page
      const targetUrl = `/states/${stateSlug}/${citySlug}`;
      // console.log('Redirecting to:', targetUrl);
      window.location.href = targetUrl;
    } catch (error) {
      console.error('Error finding location:', error);
      const errorMessage = error instanceof Error 
        ? error.message 
        : (error?.toString() || 'Could not determine your location');
      alert(errorMessage + '. Please try searching manually.');
    } finally {
      // Restore button state
      findNearestBtn.innerHTML = originalContent;
      findNearestBtn.disabled = false;
    }
  });
</script>

---
export interface Marker {
  lat: number;
  lng: number;
  name: string;
  address?: string;
  phone?: string;
  website?: string;
  id: string; // Add ID for identifying centers
}

export interface Props {
  markers: Marker[];
  initialZoom?: number;
}

const props = Astro.props;
---

<div class="map-container relative rounded-lg overflow-hidden shadow-md h-full w-full" data-component="map-component">
  <div 
    id="map" 
    class="h-full w-full" 
    data-markers={JSON.stringify(props.markers)}
    data-zoom={props.initialZoom || 12}
  ></div>
  <div class="absolute inset-0 flex items-center justify-center bg-gray-100 map-loading">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-700 mx-auto mb-3"></div>
      <p class="text-gray-600">Loading map...</p>
    </div>
  </div>
</div>

<script>
  // Batch size for marker creation
  const MARKER_BATCH_SIZE = 20;
  const MARKER_BATCH_DELAY = 10; // milliseconds
  
  let activeMarker: google.maps.Marker | null = null;

  // Function to open directions in Google Maps
  function openDirections(lat: number, lng: number) {
    if (!lat || !lng) return;
    window.open(`https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`, '_blank');
  }

  // This function creates markers in batches to avoid blocking the main thread
  async function createMarkersInBatches(map: google.maps.Map, markers: any[], infoWindow: google.maps.InfoWindow) {
    const markerRefs = new Map();
    const bounds = new google.maps.LatLngBounds();

    // Process markers in batches
    for (let i = 0; i < markers.length; i += MARKER_BATCH_SIZE) {
      const batch = markers.slice(i, i + MARKER_BATCH_SIZE);
      
      // Create a batch of markers
      const batchPromises = batch.map(marker => {
        return new Promise<void>((resolve) => {
          const position = { lat: marker.lat, lng: marker.lng };
          const mapMarker = new google.maps.Marker({
            position,
            map,
            title: marker.name,
            animation: google.maps.Animation.DROP
          });

          // Store marker reference
          markerRefs.set(marker.id, mapMarker);

          // Extend bounds
          bounds.extend(position);

          // Create info window content
          const content = `
            <div class="p-3 max-w-sm">
              <h3 class="font-bold text-lg">${marker.name}</h3>
              ${marker.address ? `<p class="text-gray-600 mt-1">${marker.address}</p>` : ''}
              <div class="flex gap-2 mt-2">
                ${marker.phone ? `
                  <a href="tel:${marker.phone}" class="text-green-600 hover:text-green-700 flex items-center outline-none focus:outline-none focus:ring-0">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                    Call
                  </a>
                ` : ''}
                ${marker.website ? `
                  <a href="${marker.website}" target="_blank" rel="noopener noreferrer" class="text-green-600 hover:text-green-700 flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                    </svg>
                    Website
                  </a>
                ` : ''}
                <a href="#" onclick="openDirections(${marker.lat}, ${marker.lng}); return false;" class="text-green-600 hover:text-green-700 flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  Directions
                </a>
              </div>
            </div>
          `;

          // Add click listener
          mapMarker.addListener('click', () => {
            // Stop any existing animation
            if (activeMarker && activeMarker !== mapMarker) {
              activeMarker.setAnimation(null);
            }

            // Animate this marker
            mapMarker.setAnimation(google.maps.Animation.BOUNCE);
            setTimeout(() => mapMarker.setAnimation(null), 2100);
            activeMarker = mapMarker;

            // Open info window
            infoWindow.setContent(content);
            infoWindow.open(map, mapMarker);

            // Dispatch custom event
            const event = new CustomEvent('markerClick', { 
              detail: { centerId: marker.id }
            });
            document.dispatchEvent(event);

            // Pan to marker
            map.panTo(position);
          });

          resolve();
        });
      });

      // Wait for all markers in the batch to be created
      await Promise.all(batchPromises);
      
      // Small delay between batches to prevent UI blocking
      await new Promise(resolve => setTimeout(resolve, MARKER_BATCH_DELAY));
    }

    return { markerRefs, bounds };
  }

  // This function initializes the map when the Google Maps API is loaded
  async function initializeMap() {
    const mapElements = document.querySelectorAll('#map') as NodeListOf<HTMLElement>;
    
    mapElements.forEach(async (mapElement) => {
      const loadingElement = mapElement.parentElement?.querySelector('.map-loading') as HTMLElement;
      
      try {
        // Get markers from data attribute
        const markers = JSON.parse(mapElement.dataset.markers || '[]');
        const zoom = parseInt(mapElement.dataset.zoom || '12', 10);
        
        if (!markers.length) {
          console.error('No markers provided');
          return;
        }

        // Create map instance centered on the first marker
        const map = new google.maps.Map(mapElement, {
          center: { lat: markers[0].lat, lng: markers[0].lng },
          zoom,
          styles: [
            {
              "featureType": "administrative",
              "elementType": "labels.text.fill",
              "stylers": [{"color": "#444444"}]
            },
            {
              "featureType": "landscape",
              "elementType": "all",
              "stylers": [{"color": "#f2f2f2"}]
            },
            {
              "featureType": "poi",
              "elementType": "all",
              "stylers": [{"visibility": "off"}]
            },
            {
              "featureType": "road",
              "elementType": "all",
              "stylers": [{"saturation": -100}, {"lightness": 45}]
            },
            {
              "featureType": "road.highway",
              "elementType": "all",
              "stylers": [{"visibility": "simplified"}]
            },
            {
              "featureType": "road.arterial",
              "elementType": "labels.icon",
              "stylers": [{"visibility": "off"}]
            },
            {
              "featureType": "transit",
              "elementType": "all",
              "stylers": [{"visibility": "off"}]
            },
            {
              "featureType": "water",
              "elementType": "all",
              "stylers": [{"color": "#c5e0ec"}, {"visibility": "on"}]
            }
          ]
        });

        // Create info window
        const infoWindow = new google.maps.InfoWindow();

        // Create markers in batches
        const { markerRefs, bounds } = await createMarkersInBatches(map, markers, infoWindow);

        // Listen for center selection events
        document.addEventListener('centerSelect', (e: any) => {
          const marker = markerRefs.get(e.detail.centerId);
          if (marker) {
            // Stop any existing animation
            if (activeMarker && activeMarker !== marker) {
              activeMarker.setAnimation(null);
            }

            // Animate the marker
            marker.setAnimation(google.maps.Animation.BOUNCE);
            setTimeout(() => marker.setAnimation(null), 2100);
            activeMarker = marker;

            // Open info window
            const selectedMarker = markers.find((m: any) => m.id === e.detail.centerId);
            if (selectedMarker) {
              const content = `
                <div class="p-3 max-w-sm">
                  <h3 class="font-bold text-lg">${selectedMarker.name}</h3>
                  ${selectedMarker.address ? `<p class="text-gray-600 mt-1">${selectedMarker.address}</p>` : ''}
                  <div class="flex gap-2 mt-2">
                    ${selectedMarker.phone ? `
                      <a href="tel:${selectedMarker.phone}" class="text-green-600 hover:text-green-700 flex items-center outline-none focus:outline-none focus:ring-0">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call
                      </a>
                    ` : ''}
                    ${selectedMarker.website ? `
                      <a href="${selectedMarker.website}" target="_blank" rel="noopener noreferrer" class="text-green-600 hover:text-green-700 flex items-center outline-none focus:outline-none focus:ring-0">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                        </svg>
                        Website
                      </a>
                    ` : ''}
                    <a href="#" onclick="openDirections(${selectedMarker.lat}, ${selectedMarker.lng}); return false;" class="text-green-600 hover:text-green-700 flex items-center outline-none focus:outline-none focus:ring-0">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      Directions
                    </a>
                  </div>
                </div>
              `;
              infoWindow.setContent(content);
              infoWindow.open(map, marker);
            }

            // Pan to marker
            map.panTo(marker.getPosition());
          }
        });

        // Fit map to show all markers with padding
        if (markers.length > 1) {
          const padding = { top: 50, right: 50, bottom: 50, left: 50 };
          map.fitBounds(bounds, padding);
        }
        
        // Hide loading indicator
        if (loadingElement) {
          loadingElement.style.display = 'none';
        }
      } catch (error) {
        console.error('Error initializing map:', error);
        if (loadingElement) {
          loadingElement.innerHTML = '<p class="text-red-500">Error loading map</p>';
        }
      }
    });
  }

  // Set up the Google Maps script if it hasn't been loaded yet
  function loadGoogleMapsAPI() {
    if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
      const apiKey = import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY;
      if (!apiKey) {
        console.error('Google Maps API key is missing');
        return;
      }

      console.log('Loading Google Maps API');
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initializeMap`;
      script.async = true;
      script.defer = true;
      
      // Define the callback globally
      (window as any).initializeMap = initializeMap;
      
      script.onerror = (error) => {
        console.error('Failed to load Google Maps script:', error);
        const loadingElements = document.querySelectorAll('.map-loading') as NodeListOf<HTMLElement>;
        loadingElements.forEach(el => {
          el.innerHTML = '<p class="text-red-500">Failed to load Google Maps</p>';
        });
      };

      document.head.appendChild(script);
    } else {
      // If the API is already loaded, just initialize the map
      initializeMap();
    }
  }

  // Initialize maps when the component is mounted
  document.addEventListener('DOMContentLoaded', loadGoogleMapsAPI);
</script>

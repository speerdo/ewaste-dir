---
import type { RecyclingCenter } from '../types/supabase';
import { getRecyclingCentersByState } from '../lib/supabase';
import type { CentersByCity } from '../lib/supabase';

type Props = {
  state: string;
};

const { state } = Astro.props;
const centersByCity: CentersByCity = await getRecyclingCentersByState(state);
const cities = Object.keys(centersByCity).sort();

// Helper function to format working hours
function formatWorkingHours(hours: any): string {
  if (!hours) return 'Hours not available';
  if (typeof hours === 'string') {
    if (hours === '24/7') return 'Open 24/7';
    return hours;
  }
  
  try {
    let parsed = hours;
    if (typeof hours === 'string') {
      parsed = JSON.parse(hours);
    }
    
    const daysOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    return Object.entries(parsed)
      .sort(([a], [b]) => daysOrder.indexOf(a) - daysOrder.indexOf(b))
      .map(([day, time]) => `${day}: ${time}`)
      .join('\n');
  } catch (error) {
    console.error('Error parsing hours:', error);
    return hours.toString();
  }
}
---

<!-- City Quick Nav -->
<div class="bg-gray-50 border-b border-gray-200 sticky top-16 z-40">
  <div class="container mx-auto px-4 py-4">
    <div class="flex items-center space-x-4 overflow-x-auto">
      <span class="text-gray-600 font-medium whitespace-nowrap">Quick Jump:</span>
      {cities.map((city) => (
        <a 
          href={`#${city.toLowerCase().replace(/\s+/g, '-')}`} 
          class="px-4 py-2 bg-white hover:bg-green-50 text-gray-700 hover:text-green-700 rounded-full transition-colors whitespace-nowrap shadow-sm"
        >
          {city}
        </a>
      ))}
    </div>
  </div>
</div>

<!-- Cities Content -->
<div class="container mx-auto px-4 py-12">
  <div class="space-y-16">
    {cities.map((city) => (
      <section id={city.toLowerCase().replace(/\s+/g, '-')} class="scroll-mt-32">
        <h2 class="text-3xl font-display font-bold text-gray-900 mb-8">{city}</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {centersByCity[city].map((center: RecyclingCenter) => (
            <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300">
              <div class="relative">
                {center.photo && (
                  <img 
                    src={center.photo} 
                    alt={`${center.name} facility`} 
                    loading="lazy"
                    class="w-full h-48 object-cover"
                  />
                )}
                {center.logo && (
                  <div class="absolute bottom-4 right-4">
                    <img 
                      src={center.logo} 
                      alt={`${center.name} logo`} 
                      loading="lazy"
                      class="w-12 h-12 rounded-full border-2 border-white shadow-md"
                    />
                  </div>
                )}
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-900 mb-2">{center.name}</h3>
                
                {/* Rating */}
                {center.rating && (
                  <div class="flex items-center mb-4">
                    {Array.from({ length: Math.round(Number(center.rating)) }).map(() => (
                      <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                    <span class="ml-2 text-gray-600">
                      {Number(center.rating).toFixed(1)} ({center.reviews || 0} reviews)
                    </span>
                  </div>
                )}

                {/* Description */}
                {center.description && (
                  <p class="text-gray-600 mb-4 line-clamp-3">{center.description}</p>
                )}

                <div class="space-y-3 text-gray-600">
                  {/* Address */}
                  {center.full_address && (
                    <div class="flex items-start">
                      <svg class="h-6 w-6 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      <span>{center.full_address}</span>
                    </div>
                  )}

                  {/* Phone */}
                  {center.phone && (
                    <div class="flex items-center">
                      <svg class="h-6 w-6 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                      <a href={`tel:${center.phone}`} class="hover:text-green-600">{center.phone}</a>
                    </div>
                  )}

                  {/* Website */}
                  {center.site && (
                    <div class="flex items-center">
                      <svg class="h-6 w-6 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                      </svg>
                      <a href={center.site} target="_blank" rel="noopener noreferrer" class="text-green-600 hover:text-green-700">
                        Visit Website
                      </a>
                    </div>
                  )}

                  {/* Working Hours */}
                  {center.working_hours && (
                    <div class="flex items-start">
                      <svg class="h-6 w-6 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <div class="whitespace-pre-line">
                        {formatWorkingHours(center.working_hours)}
                      </div>
                    </div>
                  )}

                  {/* Accepted Items */}
                  {center.accepted_items && (
                    <div class="flex items-start">
                      <svg class="h-6 w-6 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                      <span>{center.accepted_items}</span>
                    </div>
                  )}
                </div>

                {/* Get Directions Button */}
                <button
                  onclick={`window.showDirections(${center.latitude}, ${center.longitude})`}
                  class="mt-6 w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center"
                >
                  <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  Get Directions
                </button>
              </div>
            </div>
          ))}
        </div>
      </section>
    ))}
  </div>
</div>

<script>
  // Global function for showing directions
  declare global {
    interface Window {
      showDirections: (lat: number, lng: number) => void;
    }
  }

  window.showDirections = function(lat: number, lng: number) {
    if (!lat || !lng) return;
    window.open(`https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`, '_blank');
  };
</script> 

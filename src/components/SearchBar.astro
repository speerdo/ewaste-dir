---
// SearchBar.astro
import { getAllStates, getCitiesByState } from '../lib/supabase';

// Get all states and their cities at build time
const states = await getAllStates();
const cityStatePairs = await Promise.all(
  states.map(async (state) => {
    const cities = await getCitiesByState(state.id);
    return cities.map(city => ({
      city: city.name,
      state: state.name
    }));
  })
).then(results => results.flat());
---

<div class="relative max-w-2xl mx-auto">
  <form 
    id="search-form"
    class="flex flex-col sm:flex-row gap-2"
  >
    <div class="relative flex-grow">
      <input
        type="text"
        id="search-input"
        name="q"
        placeholder="Search by city or state..."
        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-transparent"
        autocomplete="off"
      />
      <button 
        type="button"
        id="use-location-btn"
        class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-green-600"
        title="Use my location"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        </svg>
      </button>
    </div>

    <button
      type="submit"
      class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex-shrink-0"
    >
      Search
    </button>
  </form>

  <div 
    id="search-results"
    class="absolute left-0 right-0 top-full mt-2 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-50 max-h-96 overflow-y-auto"
  >
    <div class="p-2">
      <div id="results-content" class="divide-y divide-gray-100"></div>
    </div>
  </div>
</div>

<script define:vars={{ cityStatePairs }}>
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input');
  const searchResults = document.getElementById('search-results');
  const resultsContent = document.getElementById('results-content');
  let searchTimeout;

  // Function to search through city-state pairs
  function searchLocations(query) {
    query = query.toLowerCase().trim();
    if (!query) return [];

    // First try exact matches
    const exactMatches = cityStatePairs.filter(({ city, state }) => {
      const cityLower = city.toLowerCase();
      const stateLower = state.toLowerCase();
      return cityLower === query || stateLower === query;
    });

    // Then try partial matches
    const partialMatches = cityStatePairs.filter(({ city, state }) => {
      const cityLower = city.toLowerCase();
      const stateLower = state.toLowerCase();
      return (cityLower.includes(query) || stateLower.includes(query)) && 
             !exactMatches.find(m => m.city === city && m.state === state);
    });

    // Combine and map to suggestion format
    return [...exactMatches, ...partialMatches]
      .slice(0, 10)
      .map(({ city, state }) => ({
        text: `${city}, ${state}`,
        url: `/states/${state.toLowerCase()}/${city.toLowerCase().replace(/\s+/g, '-')}`
      }));
  }

  // Handle form submission
  searchForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const query = searchInput.value.trim();
    if (!query) return;

    const suggestions = searchLocations(query);
    console.log('Search results:', suggestions);

    if (suggestions.length > 0) {
      // If there's an exact match, go to that page
      const exactMatch = suggestions.find(s => 
        s.text.toLowerCase() === query.toLowerCase()
      );
      if (exactMatch) {
        window.location.href = exactMatch.url;
        return;
      }
      // If there's only one result, use that
      if (suggestions.length === 1) {
        window.location.href = suggestions[0].url;
        return;
      }
      // Otherwise show suggestions
      showSuggestions(suggestions);
    } else {
      resultsContent.innerHTML = `
        <div class="px-4 py-3 text-gray-500">
          No locations found matching "${query}"
        </div>
      `;
      searchResults.classList.remove('hidden');
    }
  });

  // Handle input changes for autocomplete
  searchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    const query = searchInput.value.trim();
    
    if (query.length < 2) {
      searchResults.classList.add('hidden');
      return;
    }

    searchTimeout = setTimeout(() => {
      const suggestions = searchLocations(query);
      showSuggestions(suggestions);
    }, 150);
  });

  function showSuggestions(suggestions) {
    if (suggestions.length > 0) {
      resultsContent.innerHTML = suggestions
        .map(suggestion => `
          <button
            class="w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center gap-2 group"
            data-url="${suggestion.url}"
            onclick="window.location.href='${suggestion.url}'"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
            </svg>
            <span>${suggestion.text}</span>
          </button>
        `)
        .join('');
      searchResults.classList.remove('hidden');
    } else {
      searchResults.classList.add('hidden');
    }
  }

  // Close suggestions when clicking outside
  document.addEventListener('click', (event) => {
    if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
      searchResults.classList.add('hidden');
    }
  });

  // Handle keyboard navigation
  searchInput.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      searchResults.classList.add('hidden');
    }
  });

  // Keep the existing geolocation code
  const useLocationBtn = document.getElementById('use-location-btn');
  useLocationBtn.addEventListener('click', () => {
    if (!navigator.geolocation) {
      alert('Geolocation is not supported by your browser');
      return;
    }

    useLocationBtn.disabled = true;
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const response = await fetch(`/api/geocode?lat=${position.coords.latitude}&lng=${position.coords.longitude}`);
          const data = await response.json();
          
          if (data.city && data.state) {
            window.location.href = `/states/${data.state.toLowerCase()}/${data.city.toLowerCase().replace(/\s+/g, '-')}`;
          } else {
            throw new Error('Location not found');
          }
        } catch (error) {
          console.error('Error getting location:', error);
          alert('Could not determine your location. Please try searching manually.');
        } finally {
          useLocationBtn.disabled = false;
        }
      },
      (error) => {
        console.error('Geolocation error:', error);
        alert('Could not get your location. Please try searching manually.');
        useLocationBtn.disabled = false;
      }
    );
  });
</script> 

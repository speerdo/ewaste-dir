---
import type { RecyclingCenter } from '../../types/supabase';


interface Props {
  center: RecyclingCenter;
  defaultLogo: string;
}

const { center, defaultLogo } = Astro.props;

// Format working hours for display
function formatWorkingHours(hours: any): string {
  if (!hours) return 'Hours not available';
  if (typeof hours === 'string') {
    if (hours === '24/7') return 'Open 24/7';
    return hours;
  }
  
  try {
    let parsed = hours;
    if (typeof hours === 'string') {
      parsed = JSON.parse(hours);
    }
    
    const daysOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    return Object.entries(parsed)
      .sort(([a], [b]) => daysOrder.indexOf(a) - daysOrder.indexOf(b))
      .map(([day, time]) => `${day}: ${time}`)
      .join('\n');
  } catch (error) {
    console.error('Error parsing hours:', error);
    return hours.toString();
  }
}

// Format legitimacy score for display
function getLegitimacyBadge(center: RecyclingCenter) {
  // Check if we have any legitimacy data at all
  const hasLegitimacyData = center.legitimacy_score != null || center.is_legitimate != null || center.scraped_at != null;
  
  if (center.is_legitimate === true) {
    return {
      text: 'Verified',
      color: 'bg-green-100 text-green-800',
      icon: 'check-circle'
    };
  }
  
  if (center.legitimacy_score && center.legitimacy_score >= 50) {
    return {
      text: `Trusted (${center.legitimacy_score})`,
      color: 'bg-green-100 text-green-800',
      icon: 'shield-check'
    };
  }
  
  if (center.legitimacy_score && center.legitimacy_score >= 25) {
    return {
      text: `Verified (${center.legitimacy_score})`,
      color: 'bg-blue-100 text-blue-800',
      icon: 'check-circle'
    };
  }
  
  // If no legitimacy data exists, show "Needs Verification"
  if (!hasLegitimacyData) {
    return {
      text: 'Needs Verification',
      color: 'bg-gray-100 text-gray-600',
      icon: 'question-mark'
    };
  }
  
  return null;
}

const legitimacyBadge = getLegitimacyBadge(center);

// Extract business specialties from description and name
function getBusinessSpecialties(center: RecyclingCenter): string[] {
  const text = (center.description || center.name || '').toLowerCase();
  const specialties: string[] = [];
  
  const serviceTypes = {
    'Electronics Recycling': ['electronic', 'computer', 'phone', 'laptop', 'tablet', 'tv', 'monitor', 'printer'],
    'Metal Recycling': ['metal', 'scrap', 'iron', 'steel', 'aluminum', 'copper', 'brass'],
    'Automotive Recycling': ['auto', 'car', 'vehicle', 'tire', 'battery', 'automotive'],
    'Computer Repair': ['repair', 'fix', 'service', 'diagnostic', 'refurbish'],
    'Data Destruction': ['data', 'destruction', 'shredding', 'secure', 'certified'],
    'Appliance Recycling': ['appliance', 'refrigerator', 'washer', 'dryer', 'dishwasher']
  };
  
  Object.entries(serviceTypes).forEach(([specialty, keywords]) => {
    if (keywords.some(keyword => text.includes(keyword))) {
      specialties.push(specialty);
    }
  });
  
  return specialties.slice(0, 3); // Limit to 3 specialties
}

// Check if recently verified (within last 30 days)
function isRecentlyVerified(center: RecyclingCenter): boolean {
  if (!center.scraped_at) return false;
  const verificationDate = new Date(center.scraped_at);
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  return verificationDate > thirtyDaysAgo;
}

const businessSpecialties = getBusinessSpecialties(center);
const recentlyVerified = isRecentlyVerified(center);
---

<div 
  id={`center-${center.id}`}
  class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer" 
  data-center-id={center.id}
  data-rating={center.rating ? Number(center.rating).toFixed(1) : "0"}
  data-name={center.name}
  data-lat={center.latitude}
  data-lng={center.longitude}
  data-legitimacy-score={center.legitimacy_score || "0"}
  data-is-legitimate={center.is_legitimate ? "true" : "false"}
  onclick={`
    // Remove highlight from all centers
    document.querySelectorAll('[data-center-id]').forEach(el => el.classList.remove('highlight-center'));
    // Add highlight to this center
    this.classList.add('highlight-center');
    // Dispatch event for map marker
    window.dispatchEvent(new CustomEvent('markerClick', { detail: { centerId: '${center.id}' }}));
  `}
>
  <div class="p-6">
    <div class="flex items-start justify-between">
      <div class="flex-grow">
        <div class="flex items-start justify-between mb-2">
          <h3 class="text-xl font-semibold text-gray-900 mr-4">
            {center.name}
          </h3>
          {legitimacyBadge && (
            <div class="flex-shrink-0">
              <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${legitimacyBadge.color}`}>
                {legitimacyBadge.icon === 'check-circle' && (
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                  </svg>
                )}
                {legitimacyBadge.icon === 'shield-check' && (
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                  </svg>
                )}
                {legitimacyBadge.icon === 'question-mark' && (
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                  </svg>
                )}
                {legitimacyBadge.text}
              </span>
            </div>
          )}
          
          {recentlyVerified && (
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" />
              </svg>
              Recently Verified
            </span>
          )}
        </div>
        
        <!-- Business Specialties -->
        {businessSpecialties.length > 0 && (
          <div class="mb-3">
            <div class="flex flex-wrap gap-1">
              {businessSpecialties.map(specialty => (
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-800">
                  {specialty}
                </span>
              ))}
            </div>
          </div>
        )}
        
        {center.rating && (
          <div class="flex items-center mb-2">
            {Array.from({ length: Math.round(Number(center.rating)) }).map(() => (
              <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <span class="ml-2 text-gray-600">
              {Number(center.rating).toFixed(1)} ({center.reviews || 0} reviews)
            </span>
          </div>
        )}
        
        {/* Last Updated / Verification Status */}
        {center.scraped_at && (
          <div class="flex items-center text-sm text-gray-500 mb-2">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Last verified: {new Date(center.scraped_at).toLocaleDateString()}
          </div>
        )}
      </div>
      
      <div class="flex-shrink-0 ml-4">
        {center.logo ? (
          <img 
            src={center.logo}
            alt={`${center.name} company logo`}
            loading="lazy"
            class="w-16 h-16 object-contain rounded-lg bg-gray-50"
            onerror={`
              this.onerror=null; 
              this.src='${defaultLogo}'; 
              this.alt='Electronics recycling center logo';
              this.setAttribute('data-fallback', 'true');
            `}
            role="img"
            aria-describedby={`logo-desc-${center.id}`}
          />
        ) : (
          <div 
            class="w-16 h-16 rounded-lg bg-gray-100 flex items-center justify-center" 
            role="img" 
            aria-label={`${center.name} - Default electronics recycling center icon`}
            aria-describedby={`logo-desc-${center.id}`}
          >
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
          </div>
        )}
        <span id={`logo-desc-${center.id}`} class="sr-only">
          Company logo for {center.name}, an electronics recycling center
        </span>
      </div>
    </div>

    <div class="mt-4 space-y-3">
      <div class="flex items-start">
        <svg class="w-6 h-6 text-gray-400 mr-3 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
        <address class="not-italic text-gray-600">
          {center.full_address}
        </address>
      </div>

      {center.phone && (
        <div class="flex items-center">
          <svg class="w-6 h-6 text-gray-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          <a href={`tel:${center.phone}`} class="text-green-600 hover:text-green-700">
            {center.phone}
          </a>
        </div>
      )}

      {center.site && (
        <div class="flex items-center">
          <svg class="w-6 h-6 text-gray-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m-9 9a9 9 0 019-9" />
          </svg>
          <a href={center.site} target="_blank" rel="noopener noreferrer" class="text-green-600 hover:text-green-700">
            Visit Website
          </a>
        </div>
      )}

      {center.description && (
        <div class="flex items-start">
          <svg class="w-6 h-6 text-gray-400 mr-3 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p class="text-gray-600">{center.description}</p>
        </div>
      )}

      {center.working_hours && (
        <div class="flex items-start">
          <svg class="w-6 h-6 text-gray-400 mr-3 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <div class="text-gray-600">
            <button 
              type="button"
              class="hours-toggle flex items-center gap-2 hover:text-green-600 transition-colors"
              onclick="this.setAttribute('aria-expanded', this.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'); document.getElementById(this.getAttribute('aria-controls')).style.display = this.getAttribute('aria-expanded') === 'true' ? 'block' : 'none'; this.querySelector('svg').classList.toggle('rotate-180')"
              aria-expanded="false"
              aria-controls={`hours-${center.id}`}
              data-hours-toggle
            >
              <span>Opening Hours</span>
              <svg class="w-4 h-4 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div 
              id={`hours-${center.id}`}
              class="mt-2 space-y-1"
              style="display: none;"
            >
              {formatWorkingHours(center.working_hours).split('\n').map(line => {
                const [day, time] = line.split(': ');
                return (
                  <div class="flex justify-between py-1">
                    <span class="font-medium text-gray-700">{day}</span>
                    <span class="text-gray-600">{time}</span>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}
    </div>

    {/* Trust/Legitimacy Info */}
    {((center.legitimacy_score || center.legitimacy_reason) || (!center.legitimacy_score && !center.is_legitimate && !center.scraped_at)) && (
      <div class="mt-4 pt-4 border-t border-gray-100">
        <div class="flex items-start">
          <svg class="w-5 h-5 text-blue-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <div class="text-sm">
            <div class="font-medium text-gray-900 mb-1 flex items-center gap-2">
              Business Verification
              {center.legitimacy_score && (
                <button 
                  type="button"
                  class="text-xs text-blue-600 hover:text-blue-800 underline"
                  onclick="this.nextElementSibling.style.display = this.nextElementSibling.style.display === 'none' ? 'block' : 'none'"
                  aria-label="Show trust score explanation"
                >
                  What's this?
                </button>
              )}
            </div>
            
            {center.legitimacy_score && (
              <div>
                <div class="text-gray-600 mb-1 flex items-center gap-2">
                  Trust Score: <span class="font-medium">{center.legitimacy_score}/100</span>
                  {center.legitimacy_score >= 30 && (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                      Legitimate
                    </span>
                  )}
                  {center.legitimacy_score < 30 && center.legitimacy_score >= -10 && (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                      Needs Review
                    </span>
                  )}
                  {center.legitimacy_score < -10 && (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                      Suspicious
                    </span>
                  )}
                </div>
                
                <div class="text-xs text-gray-500 bg-blue-50 border border-blue-100 rounded p-3 mt-2" style="display: none;">
                  <h4 class="font-semibold text-blue-900 mb-2">How Trust Scores Work</h4>
                  <p class="mb-2">
                    We analyze business websites for electronics recycling keywords, certifications, and services. 
                    Scores above 100 are possible because we add points for:
                  </p>
                  <ul class="list-disc list-inside text-xs space-y-1 mb-2">
                    <li><strong>High-value terms:</strong> "e-waste", "electronics recycling", "R2 certified" (+5 each)</li>
                    <li><strong>Medium-value terms:</strong> "recycle", "electronics", "computers" (+2 each)</li>
                    <li><strong>Services:</strong> Trade-in programs (+20), certifications (+30), major retailers (+25)</li>
                    <li><strong>Penalties:</strong> Non-electronics business indicators (negative points)</li>
                  </ul>
                  <div class="text-xs">
                    <strong>Score meanings:</strong> ≥30 = Legitimate, -10 to 29 = Needs review, &lt;-10 = Suspicious
                  </div>
                </div>
              </div>
            )}
            
            {center.legitimacy_reason && (
              <p class="text-gray-600 text-xs">{center.legitimacy_reason}</p>
            )}
            {(!center.legitimacy_score && !center.is_legitimate && !center.scraped_at) && (
              <div class="text-gray-600">
                <p class="text-xs">This business has not yet been verified through our automated checking process. Please verify credentials independently before visiting.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    )}

    <div class="mt-6 flex flex-wrap gap-4">
      {center.phone && (
        <a
          href={`tel:${center.phone}`}
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Call Now
        </a>
      )}
      {center.site && (
        <a
          href={center.site}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Visit Website
        </a>
      )}
      <button
        onclick={`window.showDirections(${center.latitude}, ${center.longitude})`}
        class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
      >
        Get Directions
      </button>
    </div>
  </div>
</div> 

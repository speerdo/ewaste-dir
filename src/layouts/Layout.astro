---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/recycling-centers.css';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { title, description, ogImage } = Astro.props;

// Default meta description
const metaDescription = description || 'Find electronics recycling centers near you. Get directions, contact information, and more.';

// Get the base URL for meta tags - use Astro.url.origin which will be correct in all environments
const baseUrl = Astro.url.origin;

// Log the URL construction (this will only show during build/development)
console.log('Environment:', import.meta.env.PROD ? 'production' : 'development');
console.log('Base URL:', baseUrl);
console.log('Current URL:', Astro.url.toString());

// Handle OG image URL
function getAbsoluteUrl(url: string) {
  try {
    // If it's already an absolute URL, return it as is
    new URL(url);
    return url;
  } catch {
    // If it's a relative URL, make it absolute using the current domain
    const absoluteUrl = new URL(url.startsWith('/') ? url : `/${url}`, baseUrl).toString();
    console.log(`Converting ${url} to ${absoluteUrl}`);
    return absoluteUrl;
  }
}

// Default OG image
const defaultOgImage = '/api/og';
const ogImageUrl = getAbsoluteUrl(ogImage || defaultOgImage);

// Get Google Maps API key from environment variable
const GOOGLE_MAPS_API_KEY = import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={metaDescription} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={getAbsoluteUrl(Astro.url.pathname)} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:image" content={ogImageUrl} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={getAbsoluteUrl(Astro.url.pathname)} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={metaDescription} />
    <meta property="twitter:image" content={ogImageUrl} />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@600;700;800&display=swap" rel="stylesheet">
    
    <title>{title}</title>

    <!-- Make API key available to client scripts -->
    <script is:inline define:vars={{ GOOGLE_MAPS_API_KEY }}>
      // Store API key in a global variable
      window.GOOGLE_MAPS_API_KEY = GOOGLE_MAPS_API_KEY;
    </script>

    <!-- Initialize Google Maps -->
    <script is:inline>
      function initializeMap() {
        // Create and dispatch the ready event
        const event = new Event('google-maps-ready');
        window.dispatchEvent(event);
      }
      // Make the function globally available
      window.initializeMap = initializeMap;
    </script>
    <script async defer
      src={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&callback=initializeMap`}
    ></script>
  </head>
  <body class="min-h-screen flex flex-col bg-white">
    <Header />
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <Footer />

    <!-- Back to top button -->
    <button id="back-to-top" class="fixed bottom-6 right-6 bg-primary-700 text-white rounded-full p-3 shadow-lg opacity-0 invisible transition-all duration-300 hover:bg-primary-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 z-50">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
      </svg>
      <span class="sr-only">Back to top</span>
    </button>

    <script>
      // Back to top button
      document.addEventListener('DOMContentLoaded', () => {
        const backToTopButton = document.getElementById('back-to-top');
        
        if (backToTopButton) {
          // Show/hide button based on scroll position
          window.addEventListener('scroll', () => {
            if (window.scrollY > 300) {
              backToTopButton.classList.remove('opacity-0', 'invisible');
              backToTopButton.classList.add('opacity-100', 'visible');
            } else {
              backToTopButton.classList.add('opacity-0', 'invisible');
              backToTopButton.classList.remove('opacity-100', 'visible');
            }
          });
          
          // Scroll to top when clicked
          backToTopButton.addEventListener('click', () => {
            window.scrollTo({
              top: 0,
              behavior: 'smooth'
            });
          });
        }
      });
    </script>
  </body>
</html>

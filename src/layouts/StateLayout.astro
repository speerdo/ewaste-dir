---
import Layout from './Layout.astro';
import StateDescription from '../components/StateDescription.astro';
import { getState, getRecyclingCentersByState } from '../lib/supabase';
import type { State, RecyclingCenter } from '../types/supabase';
import type { CentersByCity } from '../lib/supabase';

interface Props {
  state: State;
  cityData: {
    id: string;
    name: string;
    description: string;
  }[];
}

const { state, cityData } = Astro.props;

// Get recycling centers data from Supabase with error handling
let centersByCity: CentersByCity = {};
try {
  centersByCity = await getRecyclingCentersByState(state.id);
} catch (error) {
  console.error('Error fetching recycling centers:', error);
  // Provide empty default to prevent rendering errors
  centersByCity = {};
}

// Count centers with 24/7 availability (if we have this data)
const centers24_7 = Object.values(centersByCity)
  .flat()
  .filter((center: RecyclingCenter) => 
    center.working_hours && typeof center.working_hours === 'string' && center.working_hours.includes('24/7')
  ).length;

// Count total centers
const totalCenters = Object.values(centersByCity)
  .reduce((acc, centers: RecyclingCenter[]) => acc + centers.length, 0);

// Get the cities data with center counts and sort alphabetically by city name
const citiesWithCounts = Object.entries(centersByCity).map(([cityName, centers]) => ({
  id: cityName.toLowerCase().replace(/\s+/g, '-'),
  name: cityName,
  centerCount: centers.length,
  description: `Find electronics recycling centers in ${cityName}, ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`
})).sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by city name

// For now, let's use a placeholder image for states until we have proper images
const defaultStateImage = 'https://images.unsplash.com/photo-1532601224476-15c79f2f7a51?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80';
---

<Layout title={`Electronics Recycling in ${state.name}`} description={`Find certified electronics recycling centers in ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`}>
  <!-- State Hero -->
  <div class="pt-16"> <!-- Added padding to account for fixed header -->
    <!-- Hero Image -->
    <div class="relative h-[400px] overflow-hidden">
      <img 
        src={state.image_url || defaultStateImage} 
        alt={`Electronics recycling in ${state.name}`} 
        class="w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
      
      <!-- Hero Content -->
      <div class="absolute bottom-0 left-0 right-0 text-white">
        <div class="container mx-auto px-4">
          <!-- Breadcrumb -->
          <nav class="mb-4" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2">
              <li>
                <a href="/" class="text-gray-300 hover:text-white transition-colors">Home</a>
              </li>
              <li class="flex items-center">
                <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <span class="text-white font-medium ml-2">{state.name}</span>
              </li>
            </ol>
          </nav>
          
          <h1 class="text-4xl font-display font-bold mb-4">Electronics Recycling in {state.name}</h1>
          <p class="text-xl mb-6">
            {totalCenters} recycling {totalCenters === 1 ? 'center' : 'centers'} in {citiesWithCounts.length} {citiesWithCounts.length === 1 ? 'city' : 'cities'}
            {centers24_7 > 0 && ` â€¢ ${centers24_7} open 24/7`}
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- State Description -->
  <StateDescription state={state} />

  <!-- Cities List -->
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-7xl mx-auto">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {citiesWithCounts.map((city) => (
          <a 
            href={`/states/${state.id}/${city.id}`}
            class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6 border border-gray-100"
          >
            <div class="flex items-center justify-between">
              <div>
                <h2 class="text-2xl font-display font-bold text-gray-900 mb-2">{city.name}</h2>
                <p class="text-gray-600">{city.centerCount} recycling {city.centerCount === 1 ? 'center' : 'centers'}</p>
              </div>
              <div class="text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>

  <!-- Nearby States Section -->
  {state.nearby_states && state.nearby_states.length > 0 && (
    <div class="bg-gray-50 py-12">
      <div class="container mx-auto px-4">
        <h2 class="text-2xl font-display font-bold text-gray-900 mb-8">Nearby States</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {await Promise.all(Object.values(state.nearby_states).slice(0, 3).map(async nearbyState => {
            const relatedState = await getState(nearbyState);
            if (!relatedState) return null;
            
            return (
              <a href={`/states/${relatedState.id}`} class="group">
                <div class="bg-white rounded-lg shadow-md overflow-hidden transition-shadow group-hover:shadow-lg">
                  <div class="h-40 overflow-hidden">
                    <img 
                      src={relatedState.image_url || defaultStateImage} 
                      alt={relatedState.name} 
                      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                    />
                  </div>
                  <div class="p-4">
                    <h3 class="text-lg font-bold text-gray-900 group-hover:text-green-700 transition-colors">{relatedState.name}</h3>
                    <p class="text-sm text-gray-600 line-clamp-2">{relatedState.description}</p>
                  </div>
                </div>
              </a>
            );
          }))}
        </div>
      </div>
    </div>
  )}
</Layout>

---
import Layout from './Layout.astro';
import StateDescription from '../components/StateDescription.astro';
import { getState, getRecyclingCentersByState, normalizeForUrl } from '../lib/supabase';
import type { State, RecyclingCenter, City } from '../types/supabase';
import type { CentersByCity } from '../lib/supabase';

interface Props {
  state: State;
  cityData: {
    id: string;
    name: string;
    description: string;
    address: string;
    coordinates: {
      lat: number;
      lng: number;
    };
  }[];
  description?: string;
  ogImage?: string;
}

const { state, cityData, description, ogImage } = Astro.props;

// Helper function to normalize city names for comparison
function normalizeCityName(cityName: string): string {
  // Special city name normalization (matching the logic in getRecyclingCentersByCity)
  const specialCityNormalization: Record<string, string> = {
    'new york': 'New York',
    'new york city': 'New York',
    'nyc': 'New York',
    'manhattan': 'Manhattan',
    'brooklyn': 'Brooklyn',
    'queens': 'Queens',
    'bronx': 'Bronx',
    'staten island': 'Staten Island',
    'miami': 'Miami',
    'miami beach': 'Miami Beach',
    'miami-dade': 'Miami-Dade',
    'north miami': 'North Miami',
    'los angeles': 'Los Angeles',
    'la': 'Los Angeles',
    'washington': 'Washington',
    'washington dc': 'Washington, D.C.',
    'district of columbia': 'Washington, D.C.',
    'washington d.c.': 'Washington, D.C.',
    'canon city': 'Canon City',
    'cañon city': 'Canon City',
    'espanola': 'Espanola',
    'española': 'Espanola',
    'chicago': 'Chicago',
    'saint louis': 'Saint Louis',
    'st louis': 'Saint Louis',
    'st. louis': 'Saint Louis',
    'saint paul': 'Saint Paul',
    'st paul': 'Saint Paul',
    'st. paul': 'Saint Paul',
  };

  const normalizedCity = cityName.toLowerCase().trim();
  return specialCityNormalization[normalizedCity] || cityName;
}

// Function to get accurate center count for a city
function getAccurateCenterCount(cityName: string, centers: RecyclingCenter[]): number {
  // This should match the same logic used in getRecyclingCentersByCity
  const normalizedCityName = normalizeCityName(cityName);
  
  // Count centers that match this exact city name
  return centers.filter(center => {
    // Normalize the center's city name
    const centerCity = center.city || '';
    return centerCity === normalizedCityName;
  }).length;
}

// Get recycling centers data from Supabase with error handling
let centersByCity: CentersByCity = {};
try {
  centersByCity = await getRecyclingCentersByState(state.id);
} catch (error) {
  console.error('Error fetching recycling centers:', error);
  // Provide empty default to prevent rendering errors
  centersByCity = {};
}

// Count centers with 24/7 availability (if we have this data)
const centers24_7 = Object.values(centersByCity)
  .flat()
  .filter((center: RecyclingCenter) => 
    center.working_hours && typeof center.working_hours === 'string' && center.working_hours.includes('24/7')
  ).length;

// Count total centers
const totalCenters = Object.values(centersByCity)
  .reduce((acc, centers: RecyclingCenter[]) => acc + centers.length, 0);

// Combine all centers into a flat array for accurate counting
const allCenters = Object.values(centersByCity).flat();

// Get the cities data with accurate center counts and sort alphabetically by city name
const citiesWithCounts = Object.entries(centersByCity).map(([cityName, centers]) => {
  // Calculate the accurate center count using our helper function
  const accurateCenterCount = getAccurateCenterCount(cityName, centers);
  
  return {
    id: normalizeForUrl(cityName),
    name: cityName,
    centerCount: accurateCenterCount > 0 ? accurateCenterCount : centers.length, // If no exact matches, fallback to all centers
    description: `Find electronics recycling centers in ${cityName}, ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`
  };
}).sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by city name

// For now, let's use a placeholder image for states until we have proper images
const defaultStateImage = 'https://images.unsplash.com/photo-1532601224476-15c79f2f7a51?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80';

// Default description if not provided
const metaDescription = description || `Find electronics recycling centers in ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`;

// Generate optimized title (target: 50-60 characters)
const maxTitleLength = 60;
const baseStateTitle = `Electronics Recycling Centers in ${state.name} - Complete Directory`;
const mediumStateTitle = `Electronics Recycling Centers in ${state.name} - Directory`;
const shortStateTitle = `E-Waste Recycling Centers in ${state.name}`;
const ultraShortStateTitle = `E-Waste Centers: ${state.name}`;

let statePageTitle;
if (baseStateTitle.length <= maxTitleLength) {
  statePageTitle = baseStateTitle;
} else if (mediumStateTitle.length <= maxTitleLength) {
  statePageTitle = mediumStateTitle;
} else if (shortStateTitle.length <= maxTitleLength) {
  statePageTitle = shortStateTitle;
} else {
  statePageTitle = ultraShortStateTitle;
}

// Generate enhanced meta description (120-155 characters)
const enhancedDescription = description || (() => {
  const centerWord = totalCenters === 1 ? 'center' : 'centers';
  const cityWord = citiesWithCounts.length === 1 ? 'city' : 'cities';
  
  const baseDesc = `Find ${totalCenters} electronics recycling ${centerWord} across ${citiesWithCounts.length} ${cityWord} in ${state.name}. Safe disposal of computers, phones, TVs & e-waste with certified facilities.`;
  
  // If too long, use shorter version
  if (baseDesc.length > 155) {
    return `${totalCenters} electronics recycling ${centerWord} in ${state.name}. Safe disposal of computers, phones, TVs & e-waste. Find certified facilities near you.`;
  }
  
  return baseDesc;
})();
---

<Layout 
  title={statePageTitle}
  description={enhancedDescription}
  ogImage={ogImage}
>
  <!-- State Hero -->
  <div class="pt-16"> <!-- Added padding to account for fixed header -->
    <!-- Hero Image -->
    <div class="relative h-[400px] overflow-hidden">
      <img 
        src={state.image_url || defaultStateImage} 
        alt={`Electronics recycling in ${state.name}`} 
        loading="lazy"
        class="w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
      
      <!-- Hero Content -->
      <div class="absolute bottom-0 left-0 right-0 text-white">
        <div class="container mx-auto px-4">
          <!-- Breadcrumb -->
          <nav class="mb-4" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2">
              <li>
                <a href="/" class="text-gray-300 hover:text-white transition-colors">Home</a>
              </li>
              <li class="flex items-center">
                <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <span class="text-white font-medium ml-2">{state.name}</span>
              </li>
            </ol>
          </nav>
          
          <h1 class="text-4xl font-display font-bold mb-4">Electronics Recycling in {state.name}</h1>
          <p class="text-xl mb-6">
            {totalCenters} recycling {totalCenters === 1 ? 'center' : 'centers'} in {citiesWithCounts.length} {citiesWithCounts.length === 1 ? 'city' : 'cities'}
            {centers24_7 > 0 && ` • ${centers24_7} open 24/7`}
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- State Description Header -->
  <div class="bg-white py-8 border-b border-gray-100">
    <div class="container mx-auto px-4">
      <div class="max-w-7xl mx-auto">
        <h2 class="text-2xl font-display font-bold text-gray-900 mb-6">
          E-Waste Recycling Laws and Programs in {state.name}
        </h2>
        
        {state.description ? (
          <p class="text-gray-600 leading-relaxed text-lg">
            {state.description}
          </p>
        ) : (
          <p class="text-gray-600 leading-relaxed text-lg">
            Find electronics recycling centers in {state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.
          </p>
        )}
      </div>
    </div>
  </div>

  <!-- Cities Section -->
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-7xl mx-auto">
      
      <!-- Full Width Cities Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-12">
        {citiesWithCounts.map((city) => (
          <a 
            href={`/states/${state.id}/${city.id}`}
            class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-4 border border-gray-100"
          >
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-display font-bold text-gray-900 mb-1">{city.name}</h3>
                <p class="text-gray-600 text-sm">{city.centerCount} recycling {city.centerCount === 1 ? 'center' : 'centers'}</p>
              </div>
              <div class="text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </div>
          </a>
        ))}
      </div>

      <!-- Statistics and Quick Info Row -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Quick Statistics -->
        <div class="bg-green-50 p-6 rounded-lg">
          <h3 class="text-lg font-semibold text-green-800 mb-4">Recycling Statistics</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-green-700">Total Centers:</span>
              <span class="font-semibold text-green-800">{totalCenters}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-green-700">Cities Covered:</span>
              <span class="font-semibold text-green-800">{citiesWithCounts.length}</span>
            </div>
            {centers24_7 > 0 && (
              <div class="flex justify-between">
                <span class="text-green-700">24/7 Centers:</span>
                <span class="font-semibold text-green-800">{centers24_7}</span>
              </div>
            )}
          </div>
        </div>

        <!-- Nearby States Section -->
        {state.nearby_states && state.nearby_states.length > 0 && (
          <div class="bg-white border border-gray-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Nearby States</h3>
            <div class="space-y-3">
              {await Promise.all(Object.values(state.nearby_states).slice(0, 3).map(async nearbyState => {
                const relatedState = await getState(nearbyState);
                if (!relatedState) return null;
                
                return (
                  <a href={`/states/${relatedState.id}`} class="block group">
                    <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 transition-colors">
                      <div class="w-10 h-10 rounded-lg overflow-hidden mr-3">
                        <img 
                          src={relatedState.image_url || defaultStateImage} 
                          alt={relatedState.name} 
                          class="w-full h-full object-cover"
                        />
                      </div>
                      <div class="flex-1 min-w-0">
                        <h4 class="font-medium text-gray-900 group-hover:text-green-700 transition-colors truncate">{relatedState.name}</h4>
                        <p class="text-xs text-gray-600 truncate">Electronics recycling</p>
                      </div>
                      <div class="text-green-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </div>
                  </a>
                );
              }))}
            </div>
          </div>
        )}

        <!-- Quick Action Card -->
        <div class="bg-blue-50 p-6 rounded-lg">
          <h3 class="text-lg font-semibold text-blue-800 mb-3">Need Help?</h3>
          <p class="text-blue-700 text-sm mb-4">
            Can't find what you're looking for? Contact us for assistance.
          </p>
          <a 
            href="/contact" 
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors"
          >
            Get Help
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.959 8.959 0 01-4.906-1.436L3 21l1.436-5.094A8.959 8.959 0 013 12c0-4.418 3.582-8 8-8s8 3.582 8 8z" />
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Detailed State Information -->
  <StateDescription state={state} />
</Layout>

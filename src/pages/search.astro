---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import type { RecyclingCenter } from '../types/supabase';
import MapComponent from '../components/MapComponent.astro';
import type { Marker } from '../components/MapComponent.astro';

const query = Astro.url.searchParams.get('q')?.toLowerCase().trim() || '';

// Enhanced search query to be more comprehensive
const { data: centers = [] } = await supabase
  .from('recycling_centers')
  .select('*')
  .or(`
    name.ilike.%${query}%,
    city.ilike.%${query}%,
    state.ilike.%${query}%,
    full_address.ilike.%${query}%,
    zip.ilike.%${query}%,
    name.ilike.${query}%,
    city.ilike.${query}%,
    state.ilike.${query}%
  `)
  .not('city', 'is', null)
  .not('state', 'is', null)
  .order('state', { ascending: true })
  .order('city', { ascending: true })
  .limit(100);

// Convert centers to map markers
const mapMarkers: Marker[] = (centers || [])
  .map((center: RecyclingCenter) => ({
    lat: Number(center.latitude),
    lng: Number(center.longitude),
    name: center.name,
    address: center.full_address,
    phone: center.phone,
    website: center.site,
    id: center.id
  }))
  .filter(marker => !isNaN(marker.lat) && !isNaN(marker.lng));

// Group centers by state and city
const centersByLocation = (centers || []).reduce<Record<string, Record<string, RecyclingCenter[]>>>((acc, center) => {
  const state = center.state || 'Unknown State';
  const city = center.city || 'Unknown City';
  
  if (!acc[state]) {
    acc[state] = {};
  }
  if (!acc[state][city]) {
    acc[state][city] = [];
  }
  
  acc[state][city].push(center);
  return acc;
}, {});

// Count total centers
const totalCenters = centers?.length || 0;
---

<Layout title={`Search Results for "${query}" | E-Waste Recycling Centers`}>
  <div class="bg-white min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-4xl font-display font-bold text-gray-900 mb-4">
        Search Results for "{query}"
      </h1>
      <p class="text-xl text-gray-600 mb-8">
        Found {totalCenters} recycling {totalCenters === 1 ? 'center' : 'centers'}
      </p>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Map Section -->
        <div class="rounded-xl overflow-hidden shadow-lg h-[600px] lg:sticky lg:top-4">
          {mapMarkers.length > 0 ? (
            <MapComponent 
              markers={mapMarkers}
              initialZoom={4}
            />
          ) : (
            <div class="w-full h-full flex items-center justify-center bg-gray-100">
              <p class="text-gray-500">No locations found</p>
            </div>
          )}
        </div>

        <!-- Results List -->
        <div class="space-y-8">
          {Object.entries(centersByLocation).map(([state, cities]) => (
            <div class="space-y-6">
              <h2 class="text-2xl font-bold text-gray-900">{state}</h2>
              
              {Object.entries(cities).map(([city, cityResults]: [string, RecyclingCenter[]]) => (
                <div class="space-y-4">
                  <h3 class="text-xl font-semibold text-gray-800">{city}</h3>
                  
                  <div class="space-y-4">
                    {cityResults.map((center: RecyclingCenter) => (
                      <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all">
                        <div class="p-6">
                          <h4 class="text-lg font-bold text-gray-900 mb-2">
                            {center.name}
                          </h4>
                          
                          <div class="space-y-3 text-gray-600">
                            {center.full_address && (
                              <div class="flex items-start">
                                <svg class="w-6 h-6 text-gray-400 mr-3 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                <span>{center.full_address}</span>
                              </div>
                            )}

                            {center.phone && (
                              <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                </svg>
                                <a href={`tel:${center.phone}`} class="hover:text-green-600">
                                  {center.phone}
                                </a>
                              </div>
                            )}

                            {center.site && (
                              <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                                </svg>
                                <a 
                                  href={center.site}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  class="text-green-600 hover:text-green-700"
                                >
                                  Visit Website
                                </a>
                              </div>
                            )}
                          </div>

                          <div class="mt-4 flex flex-wrap gap-2">
                            <button
                              onclick={`showDirections(${center.latitude}, ${center.longitude})`}
                              class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
                            >
                              Get Directions
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          ))}

          {totalCenters === 0 && (
            <div class="text-center py-12">
              <p class="text-gray-500">No recycling centers found matching your search.</p>
              <p class="text-gray-500 mt-2">Try searching for a different city or state.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <script>
    function showDirections(lat: number, lng: number) {
      window.open(`https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`, '_blank');
    }
  </script>
</Layout> 

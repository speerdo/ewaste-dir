---
import StateLayout from '../../layouts/StateLayout.astro';
import { getRecyclingCentersByState, getState, getCitiesByState, getAllStates, normalizeForUrl } from '../../lib/supabase';
import { supabase } from '../../lib/supabase';
import type { RecyclingCenter } from '../../types/supabase';
import { monitorBuildProcess } from '../../lib/build-utils';

// Use hybrid approach with ISR
export const prerender = false;

// Set cache control headers for browser - always check freshness
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');

// Set Vercel-specific CDN cache headers with durable caching
Astro.response.headers.set('Vercel-CDN-Cache-Control', 
  'public, durable, s-maxage=3600, stale-while-revalidate=86400'
);

// Get the state parameter from the URL
const { state: stateParam } = Astro.params;

// Add cache tag for targeted invalidation
const cacheTag = `state-${stateParam}`;
Astro.response.headers.set('Cache-Tag', cacheTag);

if (!stateParam) {
  return Astro.redirect('/404');
}

// Get the state details
const state = await getState(stateParam);

if (!state) {
  return Astro.redirect('/404');
}

// Log state data for debugging
// console.log('State page - state data:', state);

// Get all recycling centers for this state
const centersByCity = await getRecyclingCentersByState(state.id);

// Sort cities by name
const sortedCities = Object.keys(centersByCity).sort();

// Calculate total centers
const totalCenters = Object.values(centersByCity).reduce((sum, centers) => sum + centers.length, 0);

// Generate OG image URL using a static default image with the production domain
const PRODUCTION_URL = 'https://www.recycleoldtech.com';
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// Prepare city data for the layout
const cityData = sortedCities.map(city => {
  const centers = centersByCity[city];
  const firstCenter = centers[0];
  return {
    id: city.toLowerCase().replace(/\s+/g, '-'),
    name: city,
    description: `Find electronics recycling centers in ${city}, ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`,
    address: firstCenter.full_address,
    coordinates: {
      lat: firstCenter.latitude,
      lng: firstCenter.longitude
    }
  };
});

// Generate description
const description = `Find ${totalCenters} electronics recycling ${totalCenters === 1 ? 'center' : 'centers'} in ${state.name}. Get directions and information for safe disposal of computers, phones, TVs and other electronic devices.`;
---

<StateLayout 
  state={state} 
  cityData={cityData}
  description={description}
  ogImage={ogImageUrl}
/>

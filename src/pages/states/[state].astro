---
import StateLayout from '../../layouts/StateLayout.astro';
import { getRecyclingCentersByState, getState, getCitiesByState, getAllStates, normalizeForUrl } from '../../lib/supabase';
import { PRODUCTION_URL } from '../../lib/url-utils';

// Use hybrid approach with ISR
export const prerender = false;

// Get the state parameter from the URL
const { state: stateParam } = Astro.params;

// Set cache control headers for browser - always check freshness
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');

// Set Vercel-specific CDN cache headers with durable caching
// Include URL parameters in cache key
Astro.response.headers.set('Vercel-CDN-Cache-Control', 
  'public, s-maxage=3600, stale-while-revalidate=86400'
);

// Ensure each URL gets its own cache entry
Astro.response.headers.set('CDN-Cache-Control', 'public, must-revalidate');
Astro.response.headers.set('Vary', 'x-vercel-id, x-forwarded-proto, x-vercel-proxy-signature, accept');

// Add cache tag for targeted invalidation
const cacheTag = `state-${stateParam}`;
Astro.response.headers.set('Cache-Tag', cacheTag);

if (!stateParam) {
  return Astro.redirect('/404');
}

// Get the state details
const state = await getState(stateParam);

if (!state) {
  return Astro.redirect('/404');
}

// Log state data for debugging
// console.log('State page - state data:', state);

// Get all recycling centers for this state
const centersByCity = await getRecyclingCentersByState(state.id);

// Sort cities by name
const sortedCities = Object.keys(centersByCity).sort();

// Calculate total centers
const totalCenters = Object.values(centersByCity).reduce((sum, centers) => sum + centers.length, 0);

// Generate OG image URL using a static default image with the production domain
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// Prepare city data for the layout
const cityData = sortedCities.map(city => {
  const centers = centersByCity[city];
  const firstCenter = centers[0];
  return {
    id: normalizeForUrl(city),
    name: city,
    description: `Find e-waste recycling centers in ${city}, ${state.name}. Safe disposal options for electronics near you.`,
    address: firstCenter.full_address,
    coordinates: {
      lat: firstCenter.latitude,
      lng: firstCenter.longitude
    }
  };
});

// Generate description
const description = `Find ${totalCenters} e-waste recycling ${totalCenters === 1 ? 'center' : 'centers'} in ${state.name}. Get directions for safe disposal of electronics and reduce environmental impact.`;
---

<StateLayout 
  state={state} 
  cityData={cityData}
  description={description}
  ogImage={ogImageUrl}
>
  <head slot="head">
    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'BreadcrumbList',
        'itemListElement': [
          {
            '@type': 'ListItem',
            position: 1,
            name: 'Home',
            item: 'https://www.recycleoldtech.com/'
          },
          {
            '@type': 'ListItem',
            position: 2,
            name: state.name,
            item: `https://www.recycleoldtech.com/states/${stateParam}`
          }
        ]
      })}
    </script>
    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@graph': cityData.map(city => {
          const business: Record<string, any> = {
            '@type': 'LocalBusiness',
            '@id': `https://www.recycleoldtech.com/states/${stateParam}/${city.id}`,
            'name': `${city.name} Electronics Recycling`,
            'description': city.description,
            'address': {
              '@type': 'PostalAddress',
              'addressLocality': city.name,
              'addressRegion': state.name,
              'addressCountry': 'US'
            }
          };
          
          if (city.coordinates && city.coordinates.lat && city.coordinates.lng) {
            business.geo = {
              '@type': 'GeoCoordinates',
              'latitude': city.coordinates.lat,
              'longitude': city.coordinates.lng
            };
          }
          
          if (city.address) {
            business.address.streetAddress = city.address;
          }
          
          return business;
        })
      })}
    </script>
  </head>
</StateLayout>

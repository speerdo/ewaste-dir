---
import Layout from '../../layouts/Layout.astro';
import { getRecyclingCentersByState, getState, getCitiesByState, getAllStates, normalizeForUrl } from '../../lib/supabase';
import { supabase } from '../../lib/supabase';
import type { RecyclingCenter } from '../../types/supabase';

// Enable static generation for production
export const prerender = true;

export async function getStaticPaths() {
  console.log('Starting getStaticPaths for states...');
  console.log('Environment:', {
    PROD: import.meta.env.PROD,
    DEV: import.meta.env.DEV,
    MODE: import.meta.env.MODE
  });

  try {
    console.log('Building static routes for all state pages...');
    
    const { data: states, error: statesError } = await supabase
      .from('states')
      .select('*');

    if (statesError) {
      console.error('Error fetching states:', statesError);
      throw statesError;
    }

    if (!states || states.length === 0) {
      console.error('No states found in database');
      return [];
    }

    console.log(`Found ${states.length} states`);
    
    return states.map(state => ({
      params: { state: normalizeForUrl(state.name) },
      props: { state }
    }));
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    throw error;
  }
}

// Get the state parameter from the URL
const { state: stateId } = Astro.params;

if (!stateId) {
  return Astro.redirect('/404');
}

// Get the state details
const state = await getState(stateId);
if (!state) {
  return Astro.redirect('/404');
}

// Get all recycling centers for this state
const centersByCity = await getRecyclingCentersByState(stateId);

// Sort cities by name
const sortedCities = Object.keys(centersByCity).sort();

// Calculate total centers
const totalCenters = Object.values(centersByCity).reduce((sum, centers) => sum + centers.length, 0);

// Log for debugging
console.log(`Found ${totalCenters} centers in ${state.name}, grouped into ${sortedCities.length} cities`);
---

<Layout title={`E-Waste Recycling Centers in ${state.name}`}>
  <div class="bg-white min-h-screen py-12">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <nav class="flex mb-8 text-sm text-gray-500" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2">
            <li>
              <a href="/" class="hover:text-primary-600">Home</a>
            </li>
            <li>
              <span class="mx-2">/</span>
            </li>
            <li>
              <a href="/states" class="hover:text-primary-600">States</a>
            </li>
            <li>
              <span class="mx-2">/</span>
            </li>
            <li>
              <span class="text-gray-900 font-medium">{state.name}</span>
            </li>
          </ol>
        </nav>

        <h1 class="text-4xl font-display font-bold text-gray-900 mb-4">
          E-Waste Recycling Centers in {state.name}
        </h1>
        
        {sortedCities.length > 0 ? (
          <p class="text-xl text-gray-600 mb-8">
            Found {totalCenters} recycling centers in {sortedCities.length} {sortedCities.length === 1 ? 'city' : 'cities'} across {state.name}
          </p>
        ) : (
          <p class="text-xl text-gray-600 mb-8">
            No recycling centers found in {state.name}. Please try another state or check back later.
          </p>
        )}

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedCities.map(city => (
            <a 
              href={`/states/${stateId}/${city.toLowerCase().replace(/\s+/g, '-')}`}
              class="group bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all"
            >
              <div class="p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-2 group-hover:text-primary-600">
                  {city}
                </h2>
                <p class="text-gray-600">
                  {centersByCity[city].length} {centersByCity[city].length === 1 ? 'center' : 'centers'}
                </p>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>

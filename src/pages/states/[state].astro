---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { RecyclingCenter } from '../../types/supabase';

// Add popular states to ensure they're included in static generation
const popularStates = [
  "California",
  "New York",
  "Texas",
  "Illinois",
  "Washington",
  "Massachusetts",
  "Georgia",
  "Colorado",
  "Florida",
  "Nevada"
];

export async function getStaticPaths() {
  // Get states from both tables
  const [{ data: statesFromCenters }, { data: statesFromStates }] = await Promise.all([
    supabase.from('recycling_centers').select('state').order('state'),
    supabase.from('states').select('name').order('name')
  ]);

  // Combine and deduplicate states
  const allStates = [
    ...(statesFromCenters?.map(row => row.state) || []),
    ...(statesFromStates?.map(row => row.name) || [])
  ];
  
  const uniqueStates = [...new Set(allStates)].filter(Boolean);

  return uniqueStates.map(stateName => ({
    params: { 
      state: stateName.toLowerCase().replace(/\s+/g, '-')
    },
    props: { stateName }
  }));
}

// Get the state parameter from the URL and convert it back to proper case
const { state } = Astro.params;
const { stateName } = Astro.props;

// Get all recycling centers for this state
let allCenters: any[] = [];
let page = 0;
const pageSize = 1000;
let hasMore = true;

while (hasMore) {
  const { data, error } = await supabase
    .from('recycling_centers')
    .select('*')
    .eq('state', stateName)
    .order('city')
    .range(page * pageSize, (page + 1) * pageSize - 1);

  if (error) {
    console.error('Error fetching centers:', error);
    return Astro.redirect('/404');
  }

  if (!data || data.length === 0) {
    hasMore = false;
  } else {
    allCenters = [...allCenters, ...data];
    page++;
  }

  // Break if we've fetched all records
  if (data && data.length < pageSize) {
    hasMore = false;
  }
}

const centers = allCenters;

// Group centers by city
const centersByCity = centers.reduce<Record<string, RecyclingCenter[]>>((acc, center) => {
  const city = center.city || 'Unknown';
  if (!acc[city]) {
    acc[city] = [];
  }
  acc[city].push(center);
  return acc;
}, {});

// Sort cities by name
const sortedCities = Object.keys(centersByCity).sort();
---

<Layout title={`E-Waste Recycling Centers in ${stateName}`}>
  <div class="bg-white min-h-screen py-12">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <nav class="flex mb-8 text-sm text-gray-500" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2">
            <li>
              <a href="/" class="hover:text-primary-600">Home</a>
            </li>
            <li>
              <span class="mx-2">/</span>
            </li>
            <li>
              <a href="/states" class="hover:text-primary-600">States</a>
            </li>
            <li>
              <span class="mx-2">/</span>
            </li>
            <li>
              <span class="text-gray-900 font-medium">{stateName}</span>
            </li>
          </ol>
        </nav>

        <h1 class="text-4xl font-display font-bold text-gray-900 mb-4">
          E-Waste Recycling Centers in {stateName}
        </h1>
        
        <p class="text-xl text-gray-600 mb-8">
          Found recycling centers in {sortedCities.length} {sortedCities.length === 1 ? 'city' : 'cities'} across {stateName}
        </p>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedCities.map(city => (
            <a 
              href={`/states/${stateName.toLowerCase().replace(/\s+/g, '-')}/${city.toLowerCase().replace(/\s+/g, '-')}`}
              class="group bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all"
            >
              <div class="p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-2 group-hover:text-primary-600">
                  {city}
                </h2>
                <p class="text-gray-600">
                  {centersByCity[city].length} {centersByCity[city].length === 1 ? 'center' : 'centers'}
                </p>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>

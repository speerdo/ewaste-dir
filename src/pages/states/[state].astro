---
import StateLayout from '../../layouts/StateLayout.astro';
import { getRecyclingCentersByState, getState, getAllStates } from '../../lib/supabase';
import type { State } from '../../types/supabase';
// import { monitorBuildProcess } from '../../lib/build-utils'; // This was unused

// Static generation for state pages
export async function getStaticPaths() {
  const allStates: State[] = await getAllStates();
  if (!allStates || allStates.length === 0) {
    console.warn("No states found for getStaticPaths in [state].astro");
    return [];
  }

  return await Promise.all(allStates.map(async (state) => {
    // Fetch centers and prepare city data within getStaticPaths
    // This data will be passed as props
    const centersByCity = await getRecyclingCentersByState(state.id);
    const sortedCities = Object.keys(centersByCity).sort();
    const totalCenters = Object.values(centersByCity).reduce((sum, centers) => sum + centers.length, 0);

    const cityDataForProps = sortedCities.map(city => {
      const centers = centersByCity[city];
      const firstCenter = centers && centers.length > 0 ? centers[0] : { full_address: 'N/A', latitude: 0, longitude: 0 }; // Handle empty centers
      return {
        id: city.toLowerCase().replace(/\s+/g, '-'),
        name: city,
        description: `Find electronics recycling centers in ${city}, ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`,
        address: firstCenter.full_address,
        coordinates: {
          lat: firstCenter.latitude,
          lng: firstCenter.longitude
        }
      };
    });

    const descriptionForProps = `Find ${totalCenters} electronics recycling ${totalCenters === 1 ? 'center' : 'centers'} in ${state.name}. Get directions and information for safe disposal of computers, phones, TVs and other electronic devices.`;
    
    const PRODUCTION_URL = 'https://www.recycleoldtech.com';
    const ogImageUrlForProps = import.meta.env.PROD 
      ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
      : '/images/default-og.png';

    return {
      params: { state: state.id },
      props: { 
        stateDetails: state, // Pass the full state object as stateDetails
        cityData: cityDataForProps,
        description: descriptionForProps,
        ogImage: ogImageUrlForProps
      }
    };
  }));
}

// Props are populated by getStaticPaths
const { stateDetails, cityData, description, ogImage } = Astro.props;

// Ensure props are available, if not, this would indicate an issue with getStaticPaths
if (!stateDetails) {
  console.error(`Error: stateDetails prop is missing for a state page. This might indicate an issue in getStaticPaths of [state].astro.`);
  // Optionally, redirect to 404 or render an error state
  // return Astro.redirect('/404'); 
}
---

<StateLayout 
  state={stateDetails} 
  cityData={cityData}
  description={description}
  ogImage={ogImage}
/>

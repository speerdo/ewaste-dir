---
import StateLayout from '../../layouts/StateLayout.astro';
import { getRecyclingCentersByState, getState, getCitiesByState, getAllStates, normalizeForUrl } from '../../lib/supabase';
import { PRODUCTION_URL } from '../../lib/url-utils';

// Enable static generation - we have 51 states
export const prerender = true;

// Generate static paths for all state pages
export async function getStaticPaths() {
  const states = await getAllStates();
  const paths = states.map(state => ({
    params: { state: state.id },
    props: { stateName: state.name }
  }));
  
  console.log(`Generated ${paths.length} static state pages`);
  return paths;
}

// Get the state parameter from the URL and props
const { state: stateParam } = Astro.params;
const { stateName } = Astro.props;

if (!stateParam) {
  return Astro.redirect('/404');
}

// Get the state details
const state = await getState(stateParam);

if (!state) {
  return Astro.redirect('/404');
}

// Log state data for debugging
// console.log('State page - state data:', state);

// Get all recycling centers for this state
const centersByCity = await getRecyclingCentersByState(state.id);

// Sort cities by name
const sortedCities = Object.keys(centersByCity).sort();

// Calculate total centers
const totalCenters = Object.values(centersByCity).reduce((sum, centers) => sum + centers.length, 0);

// Generate OG image URL using a static default image with the production domain
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// Prepare city data for the layout
const cityData = sortedCities.map(city => {
  const centers = centersByCity[city];
  const firstCenter = centers[0];
  return {
    id: normalizeForUrl(city),
    name: city,
    description: `Find electronics recycling centers in ${city}, ${state.name}. Safe and responsible disposal of computers, phones, TVs and other electronic devices.`,
    address: firstCenter.full_address,
    coordinates: {
      lat: firstCenter.latitude,
      lng: firstCenter.longitude
    }
  };
});

// Generate description - keep it between 120-155 characters, accounting for longer state names
const maxBaseLength = 155;
const minBaseLength = 120;
const centerWord = totalCenters === 1 ? 'center' : 'centers';
const cityWord = sortedCities.length === 1 ? 'city' : 'cities';

// Generate comprehensive description
const longDescription = `Find ${totalCenters} electronics recycling ${centerWord} across ${sortedCities.length} ${cityWord} in ${state.name}. Safe disposal of computers, phones, TVs & e-waste with certified facilities and secure data destruction.`;

const mediumDescription = `${totalCenters} electronics recycling ${centerWord} in ${state.name} across ${sortedCities.length} ${cityWord}. Safe disposal of computers, phones, TVs & e-waste. Find certified facilities near you.`;

const shortDescription = `${totalCenters} electronics recycling ${centerWord} in ${state.name}. Safe disposal of computers, phones, TVs & e-waste. Find certified facilities.`;

// Choose the best description that fits our length requirements
let description;
if (longDescription.length >= minBaseLength && longDescription.length <= maxBaseLength) {
  description = longDescription;
} else if (mediumDescription.length >= minBaseLength && mediumDescription.length <= maxBaseLength) {
  description = mediumDescription;
} else if (shortDescription.length >= minBaseLength) {
  description = shortDescription;
} else {
  // Fallback to ensure we meet minimum length
  description = `Find electronics recycling centers in ${state.name}. Safe and responsible disposal of computers, phones, televisions, tablets, and other electronic devices. Certified facilities with secure data destruction services.`;
}
---

<StateLayout 
  state={state} 
  cityData={cityData}
  description={description}
  ogImage={ogImageUrl}
>
  <head slot="head">
    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'BreadcrumbList',
        'itemListElement': [
          {
            '@type': 'ListItem',
            position: 1,
            name: 'Home',
            item: 'https://www.recycleoldtech.com/'
          },
          {
            '@type': 'ListItem',
            position: 2,
            name: state.name,
            item: `https://www.recycleoldtech.com/states/${stateParam}`
          }
        ]
      })}
    </script>
    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@graph': cityData.map(city => {
          const business = {
            '@type': 'LocalBusiness',
            name: city.name + ' Electronics Recycling',
            address: {
              '@type': 'PostalAddress',
              addressLocality: city.name,
              addressRegion: state.name,
              addressCountry: 'US',
            },
            description: city.description
          };
          return business;
        })
      })}
    </script>
  </head>
</StateLayout>

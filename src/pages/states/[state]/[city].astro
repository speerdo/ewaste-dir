---
import Layout from '../../../layouts/Layout.astro';
import { getState, getRecyclingCentersByCity, normalizeForUrl } from '../../../lib/supabase';
import type { RecyclingCenter } from '../../../types/supabase';
import MapComponent from '../../../components/MapComponent.astro';
import type { Marker } from '../../../components/MapComponent.astro';
import CentersList from '../../../components/recycling-centers/CentersList.astro';

// Default images
const DEFAULT_LOGO = '/images/recycling.webp';

// Use hybrid approach with ISR
export const prerender = false;

// Get data from params
const { state: stateParam, city: cityParam } = Astro.params;

// Set cache control headers for browser - always check freshness
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');

// Set Vercel-specific CDN cache headers with durable caching
// Include URL parameters in cache key
Astro.response.headers.set('Vercel-CDN-Cache-Control', 
  'public, s-maxage=3600, stale-while-revalidate=86400'
);

// Ensure each URL gets its own cache entry
Astro.response.headers.set('CDN-Cache-Control', 'public, must-revalidate');
Astro.response.headers.set('Vary', 'x-vercel-id, x-forwarded-proto, x-vercel-proxy-signature, accept');

// Add cache tags for targeted invalidation
const cacheTag = `city-${cityParam},state-${stateParam}`;
Astro.response.headers.set('Cache-Tag', cacheTag);

if (!stateParam || !cityParam) {
  return Astro.redirect('/404');
}

// Get state data
const state = await getState(stateParam);
if (!state) {
  return Astro.redirect('/404');
}

// Convert city param to proper name format for searching
// This is used only for the database query, not for display
const searchCityName = cityParam.split('-').map(word => 
  word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
).join(' ');

// Get centers data
const centers = await getRecyclingCentersByCity(stateParam, searchCityName);

// If no centers found, redirect to state page
if (!centers || centers.length === 0) {
  return Astro.redirect(`/states/${stateParam}`);
}

// Count how many centers match exactly vs nearby centers
const exactMatches = centers.filter(center => center.matched === true);
const nearbyMatches = centers.filter(center => center.matched !== true);

// Determine whether to show nearby message
const hasExactMatches = exactMatches.length > 0;
const hasNearbyMatches = nearbyMatches.length > 0;

// Choose which centers to display - if we have exact matches, only show those
// Otherwise, show the nearby matches
const displayCenters = hasExactMatches ? exactMatches : centers;

// Use the new matched flag - only show the "nearby centers" message if none of the centers match
const showNearbyMessage = !hasExactMatches && hasNearbyMatches;

// Get the actual city name from the centers data to preserve special characters
// Use the most common city name from the matching centers
const cityNameCounts = new Map<string, number>();
displayCenters.forEach(center => {
  if (center.city) {
    const count = cityNameCounts.get(center.city) || 0;
    cityNameCounts.set(center.city, count + 1);
  }
});

// Find the most frequent city name, fallback to searchCityName if no centers have city names
let cityName = searchCityName;
if (cityNameCounts.size > 0) {
  const mostCommonCity = Array.from(cityNameCounts.entries())
    .sort((a, b) => b[1] - a[1])[0][0];
  cityName = mostCommonCity;
}

// For title display
const locationDescription = hasExactMatches ? cityName : `${state.name} area`;

// Generate OG image URL using a static default image with the production domain
const PRODUCTION_URL = 'https://www.recycleoldtech.com';
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// Convert centers to map markers - only show the centers we're displaying
const mapMarkers: Marker[] = displayCenters.map(center => ({
  lat: Number(center.latitude),
  lng: Number(center.longitude),
  name: center.name,
  address: center.full_address,
  phone: center.phone,
  website: center.site,
  id: center.id
})).filter(marker => !isNaN(marker.lat) && !isNaN(marker.lng));

// Generate a unique, keyword-rich meta description for SEO
// Keep it between 110-160 characters, accounting for longer city/state names
const maxBaseLength = 160;
const baseDescription = `Electronics recycling centers in ${cityName}, ${state.name}. Safe disposal of phones, computers, TVs & e-waste.`;

// If the base description is too long, use a shorter version
const metaDescription = baseDescription.length <= maxBaseLength 
  ? baseDescription
  : `E-waste recycling in ${cityName}, ${state.name}. Safe disposal of electronics & computers.`;

// Helper function to convert working hours to schema.org format
function formatOpeningHours(workingHours: any): string | undefined {
  if (!workingHours) return undefined;
  
  // If it's already a string, return it
  if (typeof workingHours === 'string') {
    // Check if it's in a valid schema.org format
    if (workingHours.includes('24/7') || workingHours.includes('24 hours')) {
      return 'Mo-Su 00:00-24:00';
    }
    return workingHours;
  }
  
  // If it's an object with day properties, convert to schema.org format
  if (typeof workingHours === 'object') {
    try {
      const dayMap: Record<string, string> = {
        'monday': 'Mo',
        'tuesday': 'Tu', 
        'wednesday': 'We',
        'thursday': 'Th',
        'friday': 'Fr',
        'saturday': 'Sa',
        'sunday': 'Su'
      };
      
      // Group days by hours to create more compact format
      const hoursTodays: Record<string, string[]> = {};
      
      for (const [day, hours] of Object.entries(workingHours)) {
        if (typeof hours === 'string' && hours.trim()) {
          const dayCode = dayMap[day.toLowerCase()];
          if (dayCode) {
            // Skip "Closed" or similar values for schema.org (only include actual hours)
            if (hours.toLowerCase().includes('closed') || hours.toLowerCase().includes('close')) {
              continue;
            }
            const convertedHours = convertTimeFormat(hours as string);
            if (convertedHours) {
              if (!hoursTodays[convertedHours]) {
                hoursTodays[convertedHours] = [];
              }
              hoursTodays[convertedHours].push(dayCode);
            }
          }
        }
      }
      
      // Create compact format by grouping consecutive days
      const schedules: string[] = [];
      for (const [hours, days] of Object.entries(hoursTodays)) {
        if (days.length > 0) {
          // Sort days in week order
          const sortedDays = days.sort((a, b) => {
            const order = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
            return order.indexOf(a) - order.indexOf(b);
          });
          
          // Group consecutive days (e.g., Mo-Fr instead of Mo,Tu,We,Th,Fr)
          const dayString = groupConsecutiveDays(sortedDays);
          schedules.push(`${dayString} ${hours}`);
        }
      }
      
      return schedules.length > 0 ? schedules.join(', ') : undefined;
    } catch (error) {
      console.error('Error formatting opening hours:', error);
      return undefined;
    }
  }
  
  return undefined;
}

// Helper function to group consecutive days
function groupConsecutiveDays(days: string[]): string {
  if (days.length === 0) return '';
  if (days.length === 1) return days[0];
  
  const dayOrder = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
  const groups: string[] = [];
  let currentGroup = [days[0]];
  
  for (let i = 1; i < days.length; i++) {
    const currentIndex = dayOrder.indexOf(days[i]);
    const previousIndex = dayOrder.indexOf(days[i - 1]);
    
    // Check if days are consecutive
    if (currentIndex === previousIndex + 1) {
      currentGroup.push(days[i]);
    } else {
      // End current group and start new one
      if (currentGroup.length >= 3) {
        groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
      } else {
        groups.push(currentGroup.join(','));
      }
      currentGroup = [days[i]];
    }
  }
  
  // Handle the last group
  if (currentGroup.length >= 3) {
    groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
  } else {
    groups.push(currentGroup.join(','));
  }
  
  return groups.join(',');
}

// Helper function to convert time format to 24-hour format
function convertTimeFormat(timeStr: string): string | undefined {
  if (!timeStr) return undefined;
  
  try {
    // Handle "24/7" or "24 hours" cases
    if (timeStr.includes('24/7') || timeStr.includes('24 hours') || timeStr.toLowerCase().includes('24 hour')) {
      return '00:00-24:00';
    }
    
    // Handle formats like "9AM-6PM", "9:00AM-6:00PM", etc.
    const timePattern = /(\d{1,2}):?(\d{0,2})\s*(AM|PM)?\s*[-â€“]\s*(\d{1,2}):?(\d{0,2})\s*(AM|PM)?/i;
    const match = timeStr.match(timePattern);
    
    if (match) {
      let [, startHour, startMin = '00', startPeriod = '', endHour, endMin = '00', endPeriod = ''] = match;
      
      // Convert to 24-hour format
      let start24 = parseInt(startHour);
      let end24 = parseInt(endHour);
      
      if (startPeriod.toUpperCase() === 'PM' && start24 !== 12) start24 += 12;
      if (startPeriod.toUpperCase() === 'AM' && start24 === 12) start24 = 0;
      if (endPeriod.toUpperCase() === 'PM' && end24 !== 12) end24 += 12;
      if (endPeriod.toUpperCase() === 'AM' && end24 === 12) end24 = 0;
      
      const startTime = `${start24.toString().padStart(2, '0')}:${startMin.padStart(2, '0')}`;
      const endTime = `${end24.toString().padStart(2, '0')}:${endMin.padStart(2, '0')}`;
      
      return `${startTime}-${endTime}`;
    }
    
    // If we can't parse it, return the original string
    return timeStr;
  } catch (error) {
    console.error('Error converting time format:', error);
    return timeStr;
  }
}

// Generate optimized title (target: 50-60 characters)
const maxTitleLength = 60;
const baseTitle = `E-Waste Recycling in ${cityName}, ${state.name}`;
const shortTitle = `E-Waste Centers: ${cityName}, ${state.name}`;
const ultraShortTitle = `E-Waste: ${cityName}, ${state.name}`;

let pageTitle;
if (baseTitle.length <= maxTitleLength) {
  pageTitle = baseTitle;
} else if (shortTitle.length <= maxTitleLength) {
  pageTitle = shortTitle;
} else {
  pageTitle = ultraShortTitle;
}
---

<Layout 
  title={pageTitle}
  description={metaDescription}
  ogImage={ogImageUrl}
>
  <!-- Google Maps API and Global Direction Functions -->
  <script is:inline define:vars={{ mapApiKey: import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY }}>
    // Store API key in a global variable
    window.GOOGLE_MAPS_API_KEY = mapApiKey || '';
    
    // Define directions functions
    window.showDirections = function(lat, lng) {
      if (!lat || !lng) return;
      window.open('https://www.google.com/maps/dir/?api=1&destination=' + lat + ',' + lng, '_blank');
    };
    window.openDirections = window.showDirections;
    
    // Initialize Google Maps
    function initGoogleMaps() {
      window.dispatchEvent(new Event('google-maps-ready'));
    }
    window.initGoogleMaps = initGoogleMaps;
    
    // Load the script if not already loaded
    if (!document.querySelector('script[src*="maps.googleapis.com"]')) {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${window.GOOGLE_MAPS_API_KEY}&callback=initGoogleMaps&libraries=places&v=weekly`;
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
    }
  </script>
  
  <!-- Map layout styles -->
  <style is:inline>
    @media (min-width: 1024px) {
      .map-container {
        grid-column: 1;
        grid-row: 1;
      }
      .centers-container {
        grid-column: 2;
        grid-row: 1;
      }
    }
  </style>

  <!-- Main content -->
  <div class="container mx-auto px-4 py-8">
    <div class="mt-16 mb-8">
      <a 
        href={`/states/${stateParam}`}
        class="text-green-600 hover:text-green-700 flex items-center"
      >
        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to {state.name}
      </a>
    </div>

    <div class="flex flex-col lg:flex-row lg:items-end lg:justify-between mb-8">
      <div>
        <h1 class="text-4xl font-display font-bold text-gray-900 mb-2">
          Electronics Recycling in {cityName}
        </h1>
        <p class="text-xl text-gray-600">
          {displayCenters.length} recycling {displayCenters.length === 1 ? 'center' : 'centers'} in {locationDescription}
        </p>
      </div>
      <div id="sort-button-container"></div>
    </div>

    <!-- SEO descriptive paragraph for city page -->
    <div class="mb-8 max-w-2xl">
      {showNearbyMessage && (
        <div class="bg-yellow-50 border border-yellow-100 p-4 rounded-lg mb-4">
          <p class="text-base text-yellow-800">
            <span class="font-semibold">Note:</span> We couldn't find recycling centers specifically in {cityName}, 
            so we're showing you nearby options in the {state.name} area instead.
          </p>
        </div>
      )}
      <p class="text-base text-gray-700">
        Looking to recycle electronics in {cityName}, {state.name}? This directory helps you find certified e-waste recycling centers for computers, phones, TVs, printers, and more. Proper electronics recycling keeps hazardous materials out of landfills and supports a cleaner, greener community in {cityName}. Browse the map and list below to find a convenient drop-off location near you.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Map Section -->
      <div class="map-container rounded-xl overflow-hidden shadow-lg h-[600px] lg:sticky lg:top-8">
        {mapMarkers.length > 0 ? (
          <MapComponent 
            markers={mapMarkers}
            initialZoom={12}
          />
        ) : (
          <div class="w-full h-full flex items-center justify-center bg-gray-100">
            <p class="text-gray-500">Map not available</p>
          </div>
        )}
      </div>

      <!-- Recycling Centers List (scrollable) -->
      <div class="centers-container lg:h-[600px] lg:overflow-y-auto">
        <CentersList centers={displayCenters} defaultLogo={DEFAULT_LOGO} />
      </div>
    </div>
  </div>

  <!-- Map interactions script -->
  {mapMarkers.length > 0 && (
    <script>
      interface MarkerClickEvent extends CustomEvent<{ centerId: string }> {
        type: 'markerClick';
      }

      function handleMarkerClick(event: MarkerClickEvent) {
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Find and highlight the center card
        const centerElement = document.getElementById(`center-${event.detail.centerId}`);
        if (centerElement) {
          centerElement.classList.add('highlight-center');
          centerElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      function handleCenterClick(event: MouseEvent) {
        // Don't trigger if clicking on a button or link
        if ((event.target as Element).closest('button') || (event.target as Element).closest('a')) {
          return;
        }
        
        const card = event.currentTarget as Element;
        const centerId = card.getAttribute('data-center-id');
        if (!centerId) return;
        
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Add highlight to the clicked center
        card.classList.add('highlight-center');
        
        // Notify the map to focus on this marker
        const customEvent = new CustomEvent('centerSelect', {
          detail: { centerId }
        });
        document.dispatchEvent(customEvent);
      }
      
      function setupInteractions() {
        // Handle marker clicks
        document.addEventListener('markerClick', handleMarkerClick as EventListener);
        
        // Add click handlers to all center cards
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
          card.addEventListener('click', handleCenterClick as EventListener);
        });
      }
      
      // Set up interactions on initial page load
      setupInteractions();
      
      // Set up interactions after each Astro page transition
      document.addEventListener('astro:page-load', setupInteractions);
      
      // Clean up event listeners before page transitions
      document.addEventListener('astro:before-preparation', () => {
        document.removeEventListener('markerClick', handleMarkerClick as EventListener);
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
        });
      });
    </script>
  )}

  <!-- Structured data for SEO (hidden from display) -->
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    'itemListElement': [
      {
        '@type': 'ListItem',
        position: 1,
        name: 'Home',
        item: 'https://www.recycleoldtech.com/'
      },
      {
        '@type': 'ListItem',
        position: 2,
        name: state.name,
        item: `https://www.recycleoldtech.com/states/${stateParam}`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: cityName,
        item: `https://www.recycleoldtech.com/states/${stateParam}/${cityParam}`
      }
    ]
  })}></script>
  
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@graph': centers.map(center => {
      const business: Record<string, any> = {
        '@type': 'LocalBusiness',
        name: center.name,
        address: {
          '@type': 'PostalAddress',
          streetAddress: center.full_address || '',
          addressLocality: cityName,
          addressRegion: state.name,
          addressCountry: 'US',
        },
        telephone: center.phone || undefined,
        url: center.site || undefined,
        image: center.logo || undefined,
        geo: center.latitude && center.longitude ? {
          '@type': 'GeoCoordinates',
          latitude: center.latitude,
          longitude: center.longitude
        } : undefined,
        openingHours: formatOpeningHours(center.working_hours) || undefined,
        aggregateRating: center.rating ? {
          '@type': 'AggregateRating',
          ratingValue: center.rating,
          reviewCount: center.reviews || 1
        } : undefined,
        description: center.description || undefined
      };
      // Remove undefined fields
      Object.keys(business).forEach(key => business[key] === undefined && delete business[key]);
      return business;
    })
  })}></script>
</Layout>

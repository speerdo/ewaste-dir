---
import Layout from '../../../layouts/Layout.astro';
import { getState, getCitiesByState, getRecyclingCentersByCity, getRecyclingCentersByState, getAllStates, normalizeForUrl } from '../../../lib/supabase';
import type { RecyclingCenter } from '../../../types/supabase';
import { supabase } from '../../../lib/supabase';
import MapComponent from '../../../components/MapComponent.astro';
import type { Marker } from '../../../components/MapComponent.astro';
import CentersList from '../../../components/recycling-centers/CentersList.astro';
import { processBatches, chunkArray } from '../../../lib/build-utils';

// Default images
const DEFAULT_LOGO = '/images/recycling.webp';

// Generate static routes for production build with optimized processing
export async function getStaticPaths() {
  try {
    console.log('Starting getStaticPaths for city pages...');
    
    // Get ALL states efficiently
    const allStates = await getAllStates();
    console.log(`Found ${allStates.length} states to process for city pages`);
    
    // Track our progress
    const startTime = Date.now();
    
    // Process states in parallel batches (5 at a time)
    // Use our optimized batch processor
    const stateBatchResults = await processBatches(
      allStates,
      async (state) => {
        try {
          // Fetch all centers for this state (leveraging our optimized caching)
          const centersByCity = await getRecyclingCentersByState(state.id);
          const cities = Object.keys(centersByCity);
          
          // Generate paths for all cities in this state
          return cities.map(cityName => ({
            params: { 
              state: normalizeForUrl(state.name),
              city: normalizeForUrl(cityName)
            },
            props: { 
              stateName: state.name,
              cityName
            }
          }));
        } catch (error) {
          console.error(`Error processing state ${state.name}:`, error);
          return [];
        }
      },
      {
        batchSize: 5,
        label: 'states',
        reportInterval: 5
      }
    );
    
    // Flatten the results
    const paths = stateBatchResults.flat();
    
    // Final report
    const totalTime = (Date.now() - startTime) / 1000;
    console.log(`Generated ${paths.length} static city pages in ${totalTime.toFixed(1)}s`);
    
    return paths;
  } catch (error) {
    console.error('Error generating city pages:', error);
    return []; // Return empty array to avoid build failure
  }
}

// Get data from params
const { state: stateParam, city: cityParam } = Astro.params;
const { stateName, cityName: propCityName } = Astro.props || {};

if (!stateParam || !cityParam) {
  return Astro.redirect('/404');
}

// Get state data - use props when available to avoid extra DB calls
const state = stateName ? { name: stateName, id: stateParam } : await getState(stateParam);
if (!state) {
  return Astro.redirect('/404');
}

// Convert city param to proper name format or use provided prop
const cityName = propCityName || cityParam.split('-').map(word => 
  word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
).join(' ');

// Get centers data
const centers = await getRecyclingCentersByCity(stateParam, cityName);

// If no centers found, redirect to state page
if (!centers || centers.length === 0) {
  return Astro.redirect(`/states/${stateParam}`);
}

// Convert centers to map markers
const mapMarkers: Marker[] = centers.map(center => ({
  lat: Number(center.latitude),
  lng: Number(center.longitude),
  name: center.name,
  address: center.full_address,
  phone: center.phone,
  website: center.site,
  id: center.id
})).filter(marker => !isNaN(marker.lat) && !isNaN(marker.lng));

---

<Layout title={`Recycling Centers in ${cityName}, ${state.name}`}>
  <div class="bg-white">
    {/* Load Google Maps API directly */}
    <script is:inline define:vars={{ mapApiKey: import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY }}>
      window.GOOGLE_MAPS_API_KEY = mapApiKey || '';
      
      // Load Google Maps API using the recommended pattern
      function initGoogleMaps() {
        console.log('Google Maps API loaded');
        window.dispatchEvent(new Event('google-maps-ready'));
      }
      
      // Define the callback function on the window
      window.initGoogleMaps = initGoogleMaps;
      
      // Load the script if not already loaded
      if (!document.querySelector('script[src*="maps.googleapis.com"]')) {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${window.GOOGLE_MAPS_API_KEY}&callback=initGoogleMaps&libraries=places&v=weekly`;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
      }
    </script>
    
    <!-- Add inline styles to prevent layout shift -->
    <style is:inline>
      @media (min-width: 1024px) {
        .map-container {
          grid-column: 1;
          grid-row: 1;
        }
        .centers-container {
          grid-column: 2;
          grid-row: 1;
        }
      }
    </style>
    
    <div class="container mx-auto px-4 py-8">
      <!-- Add the global script before any usage -->
      <script>
        // Declare the function type on the window object
        declare global {
          interface Window {
            showDirections: (lat: number, lng: number) => void;
            openDirections: (lat: number, lng: number) => void;
          }
        }

        // Define both functions globally
        window.showDirections = function(lat: number, lng: number): void {
          if (!lat || !lng) return;
          window.open('https://www.google.com/maps/dir/?api=1&destination=' + lat + ',' + lng, '_blank');
        };

        window.openDirections = window.showDirections; // Alias for compatibility with map component
      </script>

      <div class="mb-8">
        <a 
          href={`/states/${stateParam}`}
          class="text-green-600 hover:text-green-700 flex items-center"
        >
          <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to {state.name}
        </a>
      </div>

      <h1 class="text-4xl font-display font-bold text-gray-900 mb-2">
        Electronics Recycling in {cityName}
      </h1>
      <p class="text-xl text-gray-600 mb-4">
        {centers.length} recycling {centers.length === 1 ? 'center' : 'centers'} in {cityName}, {state.name}
      </p>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Map Section (always first on desktop) -->
        <div class="map-container rounded-xl overflow-hidden shadow-lg h-[600px] lg:sticky lg:top-4">
          {mapMarkers.length > 0 ? (
            <MapComponent 
              markers={mapMarkers}
              initialZoom={12}
            />
          ) : (
            <div class="w-full h-full flex items-center justify-center bg-gray-100">
              <p class="text-gray-500">Map not available</p>
            </div>
          )}
        </div>

        <!-- Recycling Centers List (always second on desktop) -->
        <div class="centers-container">
          <CentersList centers={centers} defaultLogo={DEFAULT_LOGO} />
        </div>
      </div>
    </div>
  </div>

  {mapMarkers.length > 0 && (
    <>
      <script is:inline>
        // Define global direction functions
        window.showDirections = function(lat, lng) {
          if (!lat || !lng) return;
          window.open('https://www.google.com/maps/dir/?api=1&destination=' + lat + ',' + lng, '_blank');
        };
        window.openDirections = window.showDirections;
      </script>
      
      <script type="module">
        // Create a function to handle marker clicks
        function handleMarkerClick(centerId) {
          console.log('Marker clicked:', centerId);
          
          // Remove highlight from all centers
          document.querySelectorAll('[data-center-id]').forEach((el) => {
            el.classList.remove('highlight-center');
          });
          
          // Find and highlight the center card
          const centerElement = document.getElementById(`center-${centerId}`);
          if (centerElement) {
            centerElement.classList.add('highlight-center');
            centerElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
        
        // Create a function to handle center card clicks
        function handleCenterClick(event) {
          // Don't trigger if clicking on a button or link
          if (event.target.closest('button') || event.target.closest('a')) {
            return;
          }
          
          const card = event.currentTarget;
          const centerId = card.getAttribute('data-center-id');
          if (!centerId) return;
          
          console.log('Center card clicked:', centerId);
          
          // Remove highlight from all centers
          document.querySelectorAll('[data-center-id]').forEach((el) => {
            el.classList.remove('highlight-center');
          });
          
          // Add highlight to the clicked center
          card.classList.add('highlight-center');
          
          // Notify the map to focus on this marker
          const customEvent = new CustomEvent('centerSelect', {
            detail: { centerId }
          });
          document.dispatchEvent(customEvent);
        }
        
        // Set up the interactions between centers and map
        function setupInteractions() {
          console.log('Setting up center-map interactions');
          
          // Handle marker clicks
          document.addEventListener('markerClick', (event) => {
            handleMarkerClick(event.detail.centerId);
          });
          
          // Add click handlers to all center cards
          document.querySelectorAll('[data-center-id]').forEach(card => {
            card.addEventListener('click', handleCenterClick);
          });
        }
        
        // Initialize when page loads
        document.addEventListener('astro:page-load', () => {
          console.log('Page loaded, setting up interactions');
          setupInteractions();
        });
        
        // Also run immediately for initial page load
        setupInteractions();
      </script>
    </>
  )}
</Layout>

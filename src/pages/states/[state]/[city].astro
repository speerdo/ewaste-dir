---
import Layout from '../../../layouts/Layout.astro';
import { getState, getRecyclingCentersByCity, normalizeForUrl, getLocalCityData } from '../../../lib/supabase';
import type { RecyclingCenter } from '../../../types/supabase';
import MapComponent from '../../../components/MapComponent.astro';
import type { Marker } from '../../../components/MapComponent.astro';
import CentersList from '../../../components/recycling-centers/CentersList.astro';

// Default images
const DEFAULT_LOGO = '/images/recycling.webp';

// Use hybrid approach with ISR
export const prerender = false;

// Get data from params
const { state: stateParam, city: cityParam } = Astro.params;

// Set cache control headers for browser - always check freshness
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');

// Set Vercel-specific CDN cache headers with durable caching
// Include URL parameters in cache key
Astro.response.headers.set('Vercel-CDN-Cache-Control', 
  'public, s-maxage=3600, stale-while-revalidate=86400'
);

// Ensure each URL gets its own cache entry
Astro.response.headers.set('CDN-Cache-Control', 'public, must-revalidate');
Astro.response.headers.set('Vary', 'x-vercel-id, x-forwarded-proto, x-vercel-proxy-signature, accept');

// Add cache tags for targeted invalidation
const cacheTag = `city-${cityParam},state-${stateParam}`;
Astro.response.headers.set('Cache-Tag', cacheTag);

if (!stateParam || !cityParam) {
  return Astro.redirect('/404');
}

// Get state data
const state = await getState(stateParam);
if (!state) {
  return Astro.redirect('/404');
}

// Convert city param to proper name format for searching
// This is used only for the database query, not for display
const searchCityName = cityParam.split('-').map(word => 
  word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
).join(' ');

// Get centers data
const centers = await getRecyclingCentersByCity(stateParam, searchCityName);

// If no centers found, redirect to state page
if (!centers || centers.length === 0) {
  return Astro.redirect(`/states/${stateParam}`);
}

// Get local data for the city (regulations and statistics)
const cityStateKey = `${searchCityName}, ${state.name}`;
const localData = await getLocalCityData(cityStateKey);

// Count how many centers match exactly vs nearby centers
const exactMatches = centers.filter(center => center.matched === true);
const nearbyMatches = centers.filter(center => center.matched !== true);

// Determine whether to show nearby message
const hasExactMatches = exactMatches.length > 0;
const hasNearbyMatches = nearbyMatches.length > 0;

// Choose which centers to display - if we have exact matches, only show those
// Otherwise, show the nearby matches
const displayCenters = hasExactMatches ? exactMatches : centers;

// Use the new matched flag - only show the "nearby centers" message if none of the centers match
const showNearbyMessage = !hasExactMatches && hasNearbyMatches;

// Get the actual city name from the centers data to preserve special characters
// Use the most common city name from the matching centers
const cityNameCounts = new Map<string, number>();
displayCenters.forEach(center => {
  if (center.city) {
    const count = cityNameCounts.get(center.city) || 0;
    cityNameCounts.set(center.city, count + 1);
  }
});

// Find the most frequent city name, fallback to searchCityName if no centers have city names
let cityName = searchCityName;
if (cityNameCounts.size > 0) {
  const mostCommonCity = Array.from(cityNameCounts.entries())
    .sort((a, b) => b[1] - a[1])[0][0];
  cityName = mostCommonCity;
}

// For title display
const locationDescription = hasExactMatches ? cityName : `${state.name} area`;

// Generate OG image URL using a static default image with the production domain
const PRODUCTION_URL = 'https://www.recycleoldtech.com';
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// Convert centers to map markers - only show the centers we're displaying
const mapMarkers: Marker[] = displayCenters.map(center => ({
  lat: Number(center.latitude),
  lng: Number(center.longitude),
  name: center.name,
  address: center.full_address,
  phone: center.phone,
  website: center.site,
  id: center.id
})).filter(marker => !isNaN(marker.lat) && !isNaN(marker.lng));

// Generate a unique, keyword-rich meta description for SEO
// Keep it between 120-155 characters, accounting for longer city/state names
const maxBaseLength = 155;
const minBaseLength = 120;
const centerWord = displayCenters.length === 1 ? 'center' : 'centers';

// Generate comprehensive meta description
const longDescription = `Find ${displayCenters.length} electronics recycling ${centerWord} in ${cityName}, ${state.name}. Safe disposal of computers, phones, TVs & e-waste with certified facilities, data destruction & directions.`;

const mediumDescription = `${displayCenters.length} electronics recycling ${centerWord} in ${cityName}, ${state.name}. Safe disposal of computers, phones, TVs & e-waste. Get directions, hours & contact info.`;

const shortDescription = `Electronics recycling centers in ${cityName}, ${state.name}. Safe disposal of computers, phones, TVs & e-waste. Find certified facilities with directions.`;

// Choose the best description that fits our length requirements
let metaDescription;
if (longDescription.length >= minBaseLength && longDescription.length <= maxBaseLength) {
  metaDescription = longDescription;
} else if (mediumDescription.length >= minBaseLength && mediumDescription.length <= maxBaseLength) {
  metaDescription = mediumDescription;
} else if (shortDescription.length >= minBaseLength) {
  metaDescription = shortDescription;
} else {
  // Fallback to ensure we meet minimum length
  metaDescription = `Find electronics recycling centers in ${cityName}, ${state.name}. Safe and responsible disposal of computers, phones, televisions, tablets, and other electronic devices. Get directions, contact information, and hours of operation.`;
}

// Calculate statistics from the centers data
const centersWithLegitimacy = displayCenters.filter(center => center.legitimacy_score != null);
const verifiedCenters = displayCenters.filter(center => center.is_legitimate === true);
const unverifiedCenters = displayCenters.filter(center => 
  center.legitimacy_score == null && center.is_legitimate == null && center.scraped_at == null
);
const averageLegitimacyScore = centersWithLegitimacy.length > 0 
  ? Math.round(centersWithLegitimacy.reduce((sum, center) => sum + (center.legitimacy_score || 0), 0) / centersWithLegitimacy.length)
  : null;

// Analyze business data for insights
const centersWithRatings = displayCenters.filter(center => center.rating && Number(center.rating) > 0);
const averageRating = centersWithRatings.length > 0 
  ? Number((centersWithRatings.reduce((sum, center) => sum + Number(center.rating), 0) / centersWithRatings.length).toFixed(1))
  : null;
const totalReviews = displayCenters.reduce((sum, center) => sum + (Number(center.reviews) || 0), 0);

// Analyze business types from descriptions
const businessTypes = new Map<string, number>();
const serviceKeywords = {
  'electronics': ['electronic', 'computer', 'phone', 'laptop', 'tablet', 'tv', 'monitor'],
  'metal': ['metal', 'scrap', 'iron', 'steel', 'aluminum', 'copper'],
  'automotive': ['auto', 'car', 'vehicle', 'tire', 'battery'],
  'repair': ['repair', 'fix', 'service', 'diagnostic'],
  'recycling': ['recycle', 'disposal', 'waste', 'collection']
};

displayCenters.forEach(center => {
  const description = (center.description || center.name || '').toLowerCase();
  Object.entries(serviceKeywords).forEach(([type, keywords]) => {
    if (keywords.some(keyword => description.includes(keyword))) {
      businessTypes.set(type, (businessTypes.get(type) || 0) + 1);
    }
  });
});

// Recent verification activity
const recentlyVerified = displayCenters.filter(center => {
  if (!center.scraped_at) return false;
  const verificationDate = new Date(center.scraped_at);
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  return verificationDate > thirtyDaysAgo;
});

// Centers with detailed information
const centersWithDescriptions = displayCenters.filter(center => center.description && center.description.length > 50);
const centersWithHours = displayCenters.filter(center => center.working_hours);
const centersWithLogos = displayCenters.filter(center => center.logo);

// Helper function to convert working hours to schema.org format
function formatOpeningHours(workingHours: any): string | undefined {
  if (!workingHours) return undefined;
  
  // If it's already a string, return it
  if (typeof workingHours === 'string') {
    // Check if it's in a valid schema.org format
    if (workingHours.includes('24/7') || workingHours.includes('24 hours')) {
      return 'Mo-Su 00:00-24:00';
    }
    return workingHours;
  }
  
  // If it's an object with day properties, convert to schema.org format
  if (typeof workingHours === 'object') {
    try {
      const dayMap: Record<string, string> = {
        'monday': 'Mo',
        'tuesday': 'Tu', 
        'wednesday': 'We',
        'thursday': 'Th',
        'friday': 'Fr',
        'saturday': 'Sa',
        'sunday': 'Su'
      };
      
      // Group days by hours to create more compact format
      const hoursTodays: Record<string, string[]> = {};
      
      for (const [day, hours] of Object.entries(workingHours)) {
        if (typeof hours === 'string' && hours.trim()) {
          const dayCode = dayMap[day.toLowerCase()];
          if (dayCode) {
            // Skip "Closed" or similar values for schema.org (only include actual hours)
            if (hours.toLowerCase().includes('closed') || hours.toLowerCase().includes('close')) {
              continue;
            }
            const convertedHours = convertTimeFormat(hours as string);
            if (convertedHours) {
              if (!hoursTodays[convertedHours]) {
                hoursTodays[convertedHours] = [];
              }
              hoursTodays[convertedHours].push(dayCode);
            }
          }
        }
      }
      
      // Create compact format by grouping consecutive days
      const schedules: string[] = [];
      for (const [hours, days] of Object.entries(hoursTodays)) {
        if (days.length > 0) {
          // Sort days in week order
          const sortedDays = days.sort((a, b) => {
            const order = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
            return order.indexOf(a) - order.indexOf(b);
          });
          
          // Group consecutive days (e.g., Mo-Fr instead of Mo,Tu,We,Th,Fr)
          const dayString = groupConsecutiveDays(sortedDays);
          schedules.push(`${dayString} ${hours}`);
        }
      }
      
      return schedules.length > 0 ? schedules.join(', ') : undefined;
    } catch (error) {
      console.error('Error formatting opening hours:', error);
      return undefined;
    }
  }
  
  return undefined;
}

// Helper function to group consecutive days
function groupConsecutiveDays(days: string[]): string {
  if (days.length === 0) return '';
  if (days.length === 1) return days[0];
  
  const dayOrder = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
  const groups: string[] = [];
  let currentGroup = [days[0]];
  
  for (let i = 1; i < days.length; i++) {
    const currentIndex = dayOrder.indexOf(days[i]);
    const previousIndex = dayOrder.indexOf(days[i - 1]);
    
    // Check if days are consecutive
    if (currentIndex === previousIndex + 1) {
      currentGroup.push(days[i]);
    } else {
      // End current group and start new one
      if (currentGroup.length >= 3) {
        groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
      } else {
        groups.push(currentGroup.join(','));
      }
      currentGroup = [days[i]];
    }
  }
  
  // Handle the last group
  if (currentGroup.length >= 3) {
    groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
  } else {
    groups.push(currentGroup.join(','));
  }
  
  return groups.join(',');
}

// Helper function to convert time format to 24-hour format
function convertTimeFormat(timeStr: string): string | undefined {
  if (!timeStr) return undefined;
  
  try {
    // Handle "24/7" or "24 hours" cases
    if (timeStr.includes('24/7') || timeStr.includes('24 hours') || timeStr.toLowerCase().includes('24 hour')) {
      return '00:00-24:00';
    }
    
    // Handle formats like "9AM-6PM", "9:00AM-6:00PM", etc.
    const timePattern = /(\d{1,2}):?(\d{0,2})\s*(AM|PM)?\s*[-–]\s*(\d{1,2}):?(\d{0,2})\s*(AM|PM)?/i;
    const match = timeStr.match(timePattern);
    
    if (match) {
      let [, startHour, startMin = '00', startPeriod = '', endHour, endMin = '00', endPeriod = ''] = match;
      
      // Convert to 24-hour format
      let start24 = parseInt(startHour);
      let end24 = parseInt(endHour);
      
      if (startPeriod.toUpperCase() === 'PM' && start24 !== 12) start24 += 12;
      if (startPeriod.toUpperCase() === 'AM' && start24 === 12) start24 = 0;
      if (endPeriod.toUpperCase() === 'PM' && end24 !== 12) end24 += 12;
      if (endPeriod.toUpperCase() === 'AM' && end24 === 12) end24 = 0;
      
      const startTime = `${start24.toString().padStart(2, '0')}:${startMin.padStart(2, '0')}`;
      const endTime = `${end24.toString().padStart(2, '0')}:${endMin.padStart(2, '0')}`;
      
      return `${startTime}-${endTime}`;
    }
    
    // If we can't parse it, return the original string
    return timeStr;
  } catch (error) {
    console.error('Error converting time format:', error);
    return timeStr;
  }
}

// Generate optimized title (target: 50-60 characters)
const maxTitleLength = 60;
const baseTitle = `Electronics Recycling Centers in ${cityName}, ${state.name} - Directory`;
const mediumTitle = `Electronics Recycling Centers in ${cityName}, ${state.name}`;
const shortTitle = `E-Waste Recycling Centers in ${cityName}, ${state.name}`;
const ultraShortTitle = `E-Waste Centers: ${cityName}, ${state.name}`;

let pageTitle;
if (baseTitle.length <= maxTitleLength) {
  pageTitle = baseTitle;
} else if (mediumTitle.length <= maxTitleLength) {
  pageTitle = mediumTitle;
} else if (shortTitle.length <= maxTitleLength) {
  pageTitle = shortTitle;
} else {
  pageTitle = ultraShortTitle;
}
---

<Layout 
  title={pageTitle}
  description={metaDescription}
  ogImage={ogImageUrl}
>
  <!-- Google Maps API and Global Direction Functions -->
  <script is:inline define:vars={{ mapApiKey: import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY }}>
    // Store API key in a global variable
    window.GOOGLE_MAPS_API_KEY = mapApiKey || '';
    
    // Define directions functions
    window.showDirections = function(lat, lng) {
      if (!lat || !lng) return;
      window.open('https://www.google.com/maps/dir/?api=1&destination=' + lat + ',' + lng, '_blank');
    };
    window.openDirections = window.showDirections;
    
    // Initialize Google Maps
    function initGoogleMaps() {
      window.dispatchEvent(new Event('google-maps-ready'));
    }
    window.initGoogleMaps = initGoogleMaps;
    
    // Load the script if not already loaded
    if (!document.querySelector('script[src*="maps.googleapis.com"]')) {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${window.GOOGLE_MAPS_API_KEY}&callback=initGoogleMaps&libraries=places&v=weekly`;
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
    }
  </script>
  
  <!-- Map layout styles -->
  <style is:inline>
    @media (min-width: 1024px) {
      .map-container {
        grid-column: 1;
        grid-row: 1;
      }
      .centers-container {
        grid-column: 2;
        grid-row: 1;
      }
    }
  </style>

  <!-- Main content -->
  <div class="container mx-auto px-4 py-8">
    <div class="mt-16 mb-8">
      <a 
        href={`/states/${stateParam}`}
        class="text-green-600 hover:text-green-700 flex items-center"
      >
        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to {state.name}
      </a>
    </div>

    <!-- Header Section -->
    <div class="mb-8">
      <h1 class="text-4xl font-display font-bold text-gray-900 mb-2">
        Electronics Recycling in {cityName}
      </h1>
      <div class="flex flex-col sm:flex-row sm:items-center gap-4 mb-4">
        <p class="text-xl text-gray-600">
          {displayCenters.length} recycling {displayCenters.length === 1 ? 'center' : 'centers'} in {locationDescription}
        </p>
        
        <!-- Quick Stats -->
        <div class="flex flex-wrap items-center gap-4">
          {verifiedCenters.length > 0 && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <span class="text-sm text-gray-600">{verifiedCenters.length} verified</span>
            </div>
          )}
          
          {centersWithLegitimacy.length > verifiedCenters.length && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
              <span class="text-sm text-gray-600">{centersWithLegitimacy.length - verifiedCenters.length} checked</span>
            </div>
          )}
          
          {unverifiedCenters.length > 0 && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
              <span class="text-sm text-gray-600">{unverifiedCenters.length} need verification</span>
            </div>
          )}
          
          {averageLegitimacyScore && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-sm text-gray-600">Avg. score: {averageLegitimacyScore}</span>
            </div>
          )}
        </div>
      </div>

      <!-- Nearby Centers Message -->
      {showNearbyMessage && (
        <div class="bg-yellow-50 border border-yellow-100 p-4 rounded-lg mb-4">
          <p class="text-base text-yellow-800">
            <span class="font-semibold">Note:</span> We couldn't find recycling centers specifically in {cityName}, 
            so we're showing you nearby options in the {state.name} area instead.
          </p>
        </div>
      )}

      <!-- Data-Driven Content Section -->
      {displayCenters.length > 0 && (
        <div class="mt-6 bg-gray-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">
            Electronics Recycling Guide for {cityName}
          </h2>
          
          {/* Dynamic intro based on local data */}
          <div class="prose prose-gray max-w-none text-gray-700 space-y-4">
            <p>
              {cityName} offers {displayCenters.length} certified electronics recycling {displayCenters.length === 1 ? 'center' : 'centers'} 
              to help residents and businesses safely dispose of computers, phones, TVs, and other electronic devices.
              {verifiedCenters.length > 0 && ` Our verification process has confirmed ${verifiedCenters.length} ${verifiedCenters.length === 1 ? 'business' : 'businesses'} 
              as legitimate e-waste recyclers with proper disposal practices.`}
            </p>
            
            {businessTypes.size > 0 && (
              <p>
                Local recycling services in {cityName} specialize in various areas including{' '}
                {Array.from(businessTypes.entries())
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 3)
                  .map(([type, count], index, array) => {
                    const isLast = index === array.length - 1;
                    const isSecondToLast = index === array.length - 2;
                    return `${type.toLowerCase()}${count > 1 ? ` (${count} centers)` : ''}${isLast ? '' : isSecondToLast && array.length > 2 ? ', and ' : ', '}`;
                  })
                  .join('')}. This diversity ensures residents can find appropriate disposal methods for different types of electronic waste.
              </p>
            )}
            
            {averageRating && centersWithRatings.length > 2 && (
              <p>
                Customer satisfaction in {cityName}'s e-waste industry is strong, with an average rating of {averageRating} stars 
                based on {totalReviews.toLocaleString()} customer reviews across {centersWithRatings.length} businesses. 
                This reflects the community's commitment to reliable and professional recycling services.
              </p>
            )}
            
            <p>
              When choosing an electronics recycling center in {cityName}, look for businesses that provide data destruction services, 
              offer pickup options for large items, and maintain proper certifications. {verifiedCenters.length > 0 ? 
              `The ${verifiedCenters.length} verified centers listed above have been checked for legitimate business operations and proper disposal practices.` :
              'Always verify business credentials and ask about their disposal methods before choosing a recycling service.'}
            </p>
            
            {centersWithDescriptions.length > Math.floor(displayCenters.length * 0.6) && (
              <p>
                Most recycling centers in {cityName} provide detailed information about their services, including {centersWithHours.length} businesses 
                with posted operating hours{centersWithLogos.length > 5 ? `, and ${centersWithLogos.length} with professional business profiles` : ''}. 
                This transparency helps residents make informed decisions about where to recycle their electronics safely.
              </p>
            )}
          </div>
        </div>
      )}

      <!-- Data-Driven City Insights -->
      {displayCenters.length > 3 && (
        <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <!-- Business Specialties -->
          {businessTypes.size > 0 && (
            <div class="bg-blue-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-blue-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Popular Services
              </h3>
              <div class="space-y-1">
                {Array.from(businessTypes.entries())
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 2)
                  .map(([type, count]) => (
                    <div class="flex justify-between text-sm">
                      <span class="text-blue-700 capitalize">{type} recycling</span>
                      <span class="text-blue-600 font-medium">{count} centers</span>
                    </div>
                  ))}
              </div>
            </div>
          )}

          <!-- Customer Satisfaction -->
          {averageRating && centersWithRatings.length > 2 && (
            <div class="bg-green-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-green-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
                Customer Reviews
              </h3>
              <div class="text-sm space-y-1">
                <div class="flex items-center gap-2">
                  <span class="text-2xl font-bold text-green-700">{averageRating}</span>
                  <div class="flex text-yellow-400">
                    {Array.from({ length: Math.round(averageRating) }).map(() => (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                      </svg>
                    ))}
                  </div>
                </div>
                <p class="text-green-600">
                  Based on {totalReviews.toLocaleString()} reviews from {centersWithRatings.length} businesses
                </p>
              </div>
            </div>
          )}

          <!-- Verification Activity -->
          {(recentlyVerified.length > 0 || verifiedCenters.length > 0) && (
            <div class="bg-purple-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-purple-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Verification Status
              </h3>
              <div class="text-sm space-y-1">
                {recentlyVerified.length > 0 && (
                  <p class="text-purple-600">
                    {recentlyVerified.length} recently verified (last 30 days)
                  </p>
                )}
                {averageLegitimacyScore && (
                  <p class="text-purple-600">
                    Average trust score: <span class="font-semibold">{averageLegitimacyScore}/100</span>
                  </p>
                )}
                <p class="text-purple-600">
                  {Math.round((verifiedCenters.length / displayCenters.length) * 100)}% verified businesses
                </p>
              </div>
            </div>
          )}
        </div>
      )}

    </div>

    <!-- Sort Controls -->
    <div class="mb-6 flex justify-between items-center">
      <h2 class="text-lg font-semibold text-gray-900">
        Recycling Centers ({displayCenters.length})
      </h2>
      <div id="sort-button-container"></div>
    </div>

    <!-- Main Map and Centers Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
      <!-- Map Section -->
      <div class="map-container rounded-xl overflow-hidden shadow-lg h-[600px] lg:sticky lg:top-8">
        {mapMarkers.length > 0 ? (
          <MapComponent 
            markers={mapMarkers}
            initialZoom={12}
          />
        ) : (
          <div class="w-full h-full flex items-center justify-center bg-gray-100">
            <p class="text-gray-500">Map not available</p>
          </div>
        )}
      </div>

      <!-- Recycling Centers List (scrollable) -->
      <div class="centers-container lg:h-[600px] lg:overflow-y-auto">
        <CentersList centers={displayCenters} defaultLogo={DEFAULT_LOGO} />
      </div>
    </div>

    <!-- E-Waste Disposal Best Practices -->
    <div class="mb-8 bg-white border border-gray-200 rounded-lg p-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
        <svg class="w-6 h-6 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        Preparing Electronics for Recycling
      </h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600">
        <div>
          <h3 class="font-semibold text-gray-900 mb-3">Before You Go</h3>
          <ul class="space-y-2">
            <li class="flex items-start">
              <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              Back up and delete all personal data from devices
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              Remove batteries from devices when possible
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              Check if the center offers pickup services for large items
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-green-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              Call ahead to confirm accepted items and operating hours
            </li>
          </ul>
        </div>
        
        <div>
          <h3 class="font-semibold text-gray-900 mb-3">What to Ask</h3>
          <ul class="space-y-2">
            <li class="flex items-start">
              <svg class="w-4 h-4 text-blue-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
              </svg>
              Do you provide data destruction services?
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-blue-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
              </svg>
              What certifications do you hold for e-waste processing?
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-blue-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
              </svg>
              Are there any fees for specific types of electronics?
            </li>
            <li class="flex items-start">
              <svg class="w-4 h-4 text-blue-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
              </svg>
              Where do the recycled materials ultimately go?
            </li>
          </ul>
        </div>
      </div>
      
      <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <h4 class="font-semibold text-yellow-800 mb-2">Important Note</h4>
        <p class="text-sm text-yellow-700">
          {state.name} law requires proper disposal of certain electronics. Never dispose of computers, TVs, or phones in regular trash. 
          Choose certified recyclers to ensure compliance with environmental regulations and protect your personal data.
        </p>
      </div>
    </div>

    <!-- Local Regulations & Environmental Impact Sections -->
    {localData.regulations && (
      <div class="mb-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Local Regulations -->
        <div class="bg-blue-50 border border-blue-100 rounded-lg p-6">
          <h2 class="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Local E-Waste Regulations
          </h2>
          
          {localData.regulations.has_ewaste_ban && (
            <div class="mb-3">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                E-Waste Ban in Effect
              </span>
            </div>
          )}
          
          {localData.regulations.landfill_restrictions && (
            <div class="mb-4">
              <h3 class="font-medium text-blue-800 mb-2">Disposal Restrictions</h3>
              <p class="text-sm text-blue-700">{localData.regulations.landfill_restrictions}</p>
            </div>
          )}
          
          {localData.regulations.tv_computer_rules && (
            <div class="mb-4">
              <h3 class="font-medium text-blue-800 mb-2">TV & Computer Rules</h3>
              <p class="text-sm text-blue-700">{localData.regulations.tv_computer_rules}</p>
            </div>
          )}
          
          {localData.regulations.battery_regulations && (
            <div class="mb-4">
              <h3 class="font-medium text-blue-800 mb-2">Battery Recycling</h3>
              <p class="text-sm text-blue-700">{localData.regulations.battery_regulations}</p>
            </div>
          )}
        </div>

        <!-- Environmental Impact Stats -->
        {localData.stats && (
          <div class="bg-green-50 border border-green-100 rounded-lg p-6">
            <h2 class="text-xl font-semibold text-green-900 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Environmental Impact
            </h2>
            
            <div class="grid grid-cols-2 gap-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-green-800">{localData.stats.recycling_rate}%</div>
                <div class="text-xs text-green-600">Recycling Rate</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-800">{localData.stats.co2_savings_lbs.toLocaleString()}</div>
                <div class="text-xs text-green-600">lbs CO₂ Saved/Year</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-800">{localData.stats.jobs_supported}</div>
                <div class="text-xs text-green-600">Jobs Supported</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-800">${(localData.stats.economic_impact_dollars / 1000).toFixed(0)}K</div>
                <div class="text-xs text-green-600">Economic Impact</div>
              </div>
            </div>
            
            {localData.regulations && localData.regulations.environmental_benefits && (
              <div class="mt-4 pt-4 border-t border-green-200">
                <h3 class="font-medium text-green-800 mb-2">Local Benefits</h3>
                <p class="text-sm text-green-700">{localData.regulations.environmental_benefits}</p>
              </div>
            )}
          </div>
        )}
      </div>
    )}

    <!-- Additional Local Information -->
    {localData.regulations && (localData.regulations.municipal_programs || localData.regulations.special_events) && (
      <div class="mb-8 bg-gray-50 border border-gray-200 rounded-lg p-6">
        <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Local Programs & Events
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {localData.regulations.municipal_programs && (
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Municipal Programs</h3>
              <p class="text-sm text-gray-600">{localData.regulations.municipal_programs}</p>
            </div>
          )}
          
          {localData.regulations.special_events && (
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Special Collection Events</h3>
              <p class="text-sm text-gray-600">{localData.regulations.special_events}</p>
            </div>
          )}
          
          {localData.regulations.recycling_hotline && (
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Recycling Hotline</h3>
              <p class="text-sm text-gray-600">
                <a href={`tel:${localData.regulations.recycling_hotline}`} class="text-blue-600 hover:text-blue-700">
                  {localData.regulations.recycling_hotline}
                </a>
              </p>
            </div>
          )}
          
          {localData.regulations.government_website && (
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Local Government</h3>
              <p class="text-sm text-gray-600">
                <a href={localData.regulations.government_website} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-700">
                  Visit {cityName} Government Website →
                </a>
              </p>
            </div>
          )}
        </div>
      </div>
    )}


  </div>

  <!-- Map interactions script -->
  {mapMarkers.length > 0 && (
    <script>
      interface MarkerClickEvent extends CustomEvent<{ centerId: string }> {
        type: 'markerClick';
      }

      function handleMarkerClick(event: MarkerClickEvent) {
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Find and highlight the center card
        const centerElement = document.getElementById(`center-${event.detail.centerId}`);
        if (centerElement) {
          centerElement.classList.add('highlight-center');
          centerElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      function handleCenterClick(event: MouseEvent) {
        // Don't trigger if clicking on a button or link
        if ((event.target as Element).closest('button') || (event.target as Element).closest('a')) {
          return;
        }
        
        const card = event.currentTarget as Element;
        const centerId = card.getAttribute('data-center-id');
        if (!centerId) return;
        
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Add highlight to the clicked center
        card.classList.add('highlight-center');
        
        // Notify the map to focus on this marker
        const customEvent = new CustomEvent('centerSelect', {
          detail: { centerId }
        });
        document.dispatchEvent(customEvent);
      }
      
      function setupInteractions() {
        // Handle marker clicks
        document.addEventListener('markerClick', handleMarkerClick as EventListener);
        
        // Add click handlers to all center cards
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
          card.addEventListener('click', handleCenterClick as EventListener);
        });
      }
      
      // Set up interactions on initial page load
      setupInteractions();
      
      // Set up interactions after each Astro page transition
      document.addEventListener('astro:page-load', setupInteractions);
      
      // Clean up event listeners before page transitions
      document.addEventListener('astro:before-preparation', () => {
        document.removeEventListener('markerClick', handleMarkerClick as EventListener);
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
        });
      });
    </script>
  )}

  <!-- Structured data for SEO (hidden from display) -->
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    'itemListElement': [
      {
        '@type': 'ListItem',
        position: 1,
        name: 'Home',
        item: 'https://www.recycleoldtech.com/'
      },
      {
        '@type': 'ListItem',
        position: 2,
        name: state.name,
        item: `https://www.recycleoldtech.com/states/${stateParam}`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: cityName,
        item: `https://www.recycleoldtech.com/states/${stateParam}/${cityParam}`
      }
    ]
  })}></script>
  
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@graph': centers.map(center => {
      const business: Record<string, any> = {
        '@type': 'LocalBusiness',
        name: center.name,
        address: {
          '@type': 'PostalAddress',
          streetAddress: center.full_address || '',
          addressLocality: cityName,
          addressRegion: state.name,
          addressCountry: 'US',
        },
        telephone: center.phone || undefined,
        url: center.site || undefined,
        image: center.logo || undefined,
        geo: center.latitude && center.longitude ? {
          '@type': 'GeoCoordinates',
          latitude: center.latitude,
          longitude: center.longitude
        } : undefined,
        openingHours: formatOpeningHours(center.working_hours) || undefined,
        aggregateRating: center.rating ? {
          '@type': 'AggregateRating',
          ratingValue: center.rating,
          reviewCount: center.reviews || 1
        } : undefined,
        description: center.description || undefined
      };
      // Remove undefined fields
      Object.keys(business).forEach(key => business[key] === undefined && delete business[key]);
      return business;
    })
  })}></script>
</Layout>

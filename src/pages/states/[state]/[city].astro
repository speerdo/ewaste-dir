---
import Layout from '../../../layouts/Layout.astro';
import { getState, getRecyclingCentersByCity, normalizeForUrl, getLocalCityData, getAllStates, getCitiesByState } from '../../../lib/supabase';
import type { RecyclingCenter } from '../../../types/supabase';
import MapComponent from '../../../components/MapComponent.astro';
import type { Marker } from '../../../components/MapComponent.astro';
import CentersList from '../../../components/recycling-centers/CentersList.astro';
import CityContentEnhancer from '../../../components/CityContentEnhancer.astro';
import { generateCityMeta } from '../../../utils/metaGenerator';

// Default images
const DEFAULT_LOGO = '/images/recycling.webp';

// Enable static generation now that we have a manageable number of pages (3,970)
export const prerender = true;

// Generate static paths for all city pages
export async function getStaticPaths() {
  const states = await getAllStates();
  const paths = [];
  
  for (const state of states) {
    const cities = await getCitiesByState(state.id);
    
    for (const city of cities) {
      paths.push({
        params: { 
          state: state.id, 
          city: city.id 
        },
        props: { 
          stateName: state.name,
          cityName: city.name
        }
      });
    }
  }
  
  console.log(`Generated ${paths.length} static city pages`);
  return paths;
}

// Get data from params and props
const { state: stateParam, city: cityParam } = Astro.params;
const { stateName, cityName: propCityName } = Astro.props;

if (!stateParam || !cityParam) {
  return Astro.redirect('/404');
}

// Get state data
const state = await getState(stateParam);
if (!state) {
  return Astro.redirect('/404');
}

// Convert city param to proper name format for searching
// This is used only for the database query, not for display
// Handle cities with special characters by trying multiple conversion strategies
function convertUrlToSearchName(urlParam: string): string[] {
  const parts = urlParam.split('-').map(word => 
    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
  );
  
  // Generate multiple possible variations
  const variations = [
    // Strategy 1: Spaces (most common - try first)
    parts.join(' '),
    
    // Strategy 2: Hyphens (for cities like Ho-Ho-Kus, Winston-Salem)
    parts.join('-'),
    
    // Strategy 3: Simple apostrophe patterns (for O'Fallon, D'Iberville)
    parts.length === 2 ? `${parts[0]}'${parts[1]}` : null,
    
    // Strategy 4: "O' " pattern (for Land O' Lakes)
    parts.length === 3 && parts[1].toLowerCase() === 'o' ? `${parts[0]} O' ${parts[2]}` : null,
    
    // Strategy 5: Periods for abbreviations (Mt. Juliet, St. Louis, St. Petersburg)
    parts.length >= 2 && (parts[0].toLowerCase() === 'mt' || parts[0].toLowerCase() === 'st') 
      ? `${parts[0]}. ${parts.slice(1).join(' ')}` : null,
    
    // Strategy 6: "d'" pattern (for Coeur d'Alene)
    parts.length >= 3 && parts[1].toLowerCase() === 'd' 
      ? `${parts[0]} d'${parts.slice(2).join(' ')}` : null,
    
    // Strategy 7: "'s" possessive pattern (for Lee's Summit)  
    parts.length >= 2 && parts[1].toLowerCase() === 's'
      ? `${parts[0]}'s ${parts.slice(2).join(' ')}` : null,
      
    // Strategy 8: "Ste." abbreviation (for Sault Ste. Marie)
    parts.length >= 3 && parts[1].toLowerCase() === 'ste'
      ? `${parts[0]} Ste. ${parts.slice(2).join(' ')}` : null
  ];
  
  // Filter out null values and duplicates
  return [...new Set(variations.filter(v => v !== null))];
}

const cityVariations = convertUrlToSearchName(cityParam);

// Try each variation until we find centers
let centers: RecyclingCenter[] = [];
let searchCityName = cityVariations[0]; // Default to first variation

for (const variation of cityVariations) {
  centers = await getRecyclingCentersByCity(stateParam, variation);
  if (centers && centers.length > 0) {
    searchCityName = variation;
    console.log(`Found ${centers.length} centers using city name variation: "${variation}"`);
    break;
  }
}

// If still no centers found, redirect to state page
if (!centers || centers.length === 0) {
  return Astro.redirect(`/states/${stateParam}`);
}

// Get local data for the city (regulations and statistics)
const cityStateKey = `${searchCityName}, ${state.name}`;
const localData = await getLocalCityData(cityStateKey);

// Count how many centers match exactly vs nearby centers
const exactMatches = centers.filter(center => center.matched === true);
const nearbyMatches = centers.filter(center => center.matched !== true);

// Determine whether to show nearby message
const hasExactMatches = exactMatches.length > 0;
const hasNearbyMatches = nearbyMatches.length > 0;

// Choose which centers to display - if we have exact matches, only show those
// Otherwise, show the nearby matches
const displayCenters = hasExactMatches ? exactMatches : centers;

// Use the new matched flag - only show the "nearby centers" message if none of the centers match
const showNearbyMessage = !hasExactMatches && hasNearbyMatches;

// Get the actual city name from the centers data to preserve special characters
// Use the most common city name from the matching centers
const cityNameCounts = new Map<string, number>();
displayCenters.forEach(center => {
  if (center.city) {
    const count = cityNameCounts.get(center.city) || 0;
    cityNameCounts.set(center.city, count + 1);
  }
});

// Find the most frequent city name, fallback to searchCityName if no centers have city names
let cityName = searchCityName;
if (cityNameCounts.size > 0) {
  const mostCommonCity = Array.from(cityNameCounts.entries())
    .sort((a, b) => b[1] - a[1])[0][0];
  cityName = mostCommonCity;
}

// For title display
const locationDescription = hasExactMatches ? cityName : `${state.name} area`;

// Generate a consistent but pseudo-random number based on city name for phrasing variation
const cityHash = cityName.split('').reduce((acc: number, char: string) => acc + char.charCodeAt(0), 0);
const phrasingIndex = cityHash % 5;

const introPhrasings = [
  `${cityName} is home to ${displayCenters.length} certified electronics recycling ${displayCenters.length === 1 ? 'center' : 'centers'}, making it easier than ever for neighbors and local businesses to responsibly part with old computers, phones, TVs, and other electronic devices.`,
  
  `${cityName} provides ${displayCenters.length} certified electronics recycling ${displayCenters.length === 1 ? 'center' : 'centers'} to serve local residents and businesses with safe disposal of computers, phones, TVs, and other electronic devices.`,
  
  `Residents and businesses in ${cityName} have access to ${displayCenters.length} certified electronics recycling ${displayCenters.length === 1 ? 'facility' : 'facilities'} for secure disposal of their old computers, phones, TVs, and electronic equipment.`,
  
  `Located throughout ${cityName}, ${displayCenters.length} certified electronics recycling ${displayCenters.length === 1 ? 'center' : 'centers'} ${displayCenters.length === 1 ? 'stands' : 'stand'} ready to help residents and businesses dispose of electronics responsibly.`,
  
  `When it comes to safe electronics disposal, ${cityName} residents and businesses can count on ${displayCenters.length} certified recycling ${displayCenters.length === 1 ? 'center' : 'centers'} for proper handling of computers, phones, TVs, and other devices.`
];

const selectedIntroPhrase = introPhrasings[phrasingIndex];

// Generate OG image URL using a static default image with the production domain
const PRODUCTION_URL = 'https://www.recycleoldtech.com';
const ogImageUrl = import.meta.env.PROD 
  ? new URL('/images/default-og.png', PRODUCTION_URL).toString()
  : '/images/default-og.png';

// City-specific hero images (if available)
const cityImages: Record<string, string> = {
  'Austin': '/images/austin.jpg',
  'New York': '/images/new_york_city.jpg',
  'Miami': '/images/miami.jpg',
  'Atlanta': '/images/atlanta.jpg',
  'Boston': '/images/boston.jpg',
  'Chicago': '/images/chicago.jpg',
  'Denver': '/images/denver.JPG',
  'Houston': '/images/houston.jpg',
  'Las Vegas': '/images/las_vegas.jpg',
  'Los Angeles': '/images/los_angeles.jpg',
  'San Francisco': '/images/san_francisco.jpg',
  'Seattle': '/images/seattle.jpg'
};

const cityHeroImage = cityImages[cityName] || '/images/recycling.webp';

// Convert centers to map markers - only show the centers we're displaying
const mapMarkers: Marker[] = displayCenters.map(center => ({
  lat: Number(center.latitude),
  lng: Number(center.longitude),
  name: center.name,
  address: center.full_address,
  phone: center.phone,
  website: center.site,
  id: center.id
})).filter(marker => !isNaN(marker.lat) && !isNaN(marker.lng));

// Generate concise meta description (150 characters max)
const centerCount = displayCenters.length;
const centerWord = centerCount === 1 ? 'center' : 'centers';

// Create concise meta description following the requested format
const metaDescription = `Find ${centerCount} certified electronics recycling ${centerWord} in ${cityName}. Safe e-waste disposal for phones, computers, TVs and more in ${cityName}.`;

// Generate title and keywords using the existing meta generator for consistency
const metaData = generateCityMeta({
  cityName,
  state: state.name,
  centers: displayCenters,
  localData,
  showNearbyMessage
});

const metaTitle = metaData.title;
const metaKeywords = metaData.keywords;

// Calculate statistics from the centers data
const centersWithLegitimacy = displayCenters.filter(center => center.legitimacy_score != null);
const verifiedCenters = displayCenters.filter(center => center.is_legitimate === true);
const unverifiedCenters = displayCenters.filter(center => 
  center.legitimacy_score == null && center.is_legitimate == null && center.scraped_at == null
);
const averageLegitimacyScore = centersWithLegitimacy.length > 0 
  ? Math.round(centersWithLegitimacy.reduce((sum, center) => sum + (center.legitimacy_score || 0), 0) / centersWithLegitimacy.length)
  : null;

// Analyze business data for insights
const centersWithRatings = displayCenters.filter(center => center.rating && Number(center.rating) > 0);
const averageRating = centersWithRatings.length > 0 
  ? Number((centersWithRatings.reduce((sum, center) => sum + Number(center.rating), 0) / centersWithRatings.length).toFixed(1))
  : null;
const totalReviews = displayCenters.reduce((sum, center) => sum + (Number(center.reviews) || 0), 0);

// Analyze business types from descriptions
const businessTypes = new Map<string, number>();
const serviceKeywords = {
  'electronics': ['electronic', 'computer', 'phone', 'laptop', 'tablet', 'tv', 'monitor'],
  'metal': ['metal', 'scrap', 'iron', 'steel', 'aluminum', 'copper'],
  'automotive': ['auto', 'car', 'vehicle', 'tire', 'battery'],
  'repair': ['repair', 'fix', 'service', 'diagnostic'],
  'recycling': ['recycle', 'disposal', 'waste', 'collection']
};

displayCenters.forEach(center => {
  const description = (center.description || center.name || '').toLowerCase();
  Object.entries(serviceKeywords).forEach(([type, keywords]) => {
    if (keywords.some(keyword => description.includes(keyword))) {
      businessTypes.set(type, (businessTypes.get(type) || 0) + 1);
    }
  });
});

// Recent verification activity
const recentlyVerified = displayCenters.filter(center => {
  if (!center.scraped_at) return false;
  const verificationDate = new Date(center.scraped_at);
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  return verificationDate > thirtyDaysAgo;
});

// Centers with detailed information
const centersWithDescriptions = displayCenters.filter(center => center.description && center.description.length > 50);
const centersWithHours = displayCenters.filter(center => center.working_hours);
const centersWithLogos = displayCenters.filter(center => center.logo);

// Check if this is a large city (population > 100k or major city)
const majorCities = [
  'New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 
  'San Antonio', 'San Diego', 'Dallas', 'Austin', 'San Jose', 'Jacksonville', 
  'Fort Worth', 'Columbus', 'Charlotte', 'Indianapolis', 'San Francisco', 
  'Seattle', 'Denver', 'Boston', 'Portland', 'Las Vegas', 'Detroit', 'Memphis', 
  'Louisville', 'Baltimore', 'Milwaukee', 'Albuquerque', 'Tucson', 'Fresno', 
  'Sacramento', 'Atlanta', 'Miami', 'Orlando', 'Tampa', 'Minneapolis', 
  'Cleveland', 'Wichita', 'Arlington', 'Raleigh', 'Omaha', 'Long Beach', 
  'Virginia Beach', 'Oakland', 'Tulsa', 'New Orleans', 'Honolulu', 'Colorado Springs',
  'Kansas City', 'Mesa', 'Pittsburgh', 'St. Louis', 'Cincinnati', 'Henderson',
  'Greensboro', 'Plano', 'Newark', 'Lincoln', 'Toledo', 'Orlando', 'Chula Vista',
  'Fort Wayne', 'Jersey City', 'St. Petersburg', 'Laredo', 'Madison', 'Chandler',
  'Buffalo', 'Lubbock', 'Scottsdale', 'Reno', 'Glendale', 'Gilbert', 'Winston-Salem',
  'North Las Vegas', 'Norfolk', 'Chesapeake', 'Garland', 'Irving', 'Hialeah',
  'Fremont', 'Boise', 'Richmond', 'Baton Rouge', 'Spokane', 'Des Moines',
  'Tacoma', 'San Bernardino', 'Modesto', 'Fontana', 'Santa Clarita', 'Birmingham',
  'Oxnard', 'Fayetteville', 'Moreno Valley', 'Akron', 'Huntington Beach',
  'Little Rock', 'Augusta', 'Amarillo', 'Glendale', 'Mobile', 'Grand Rapids',
  'Salt Lake City', 'Tallahassee', 'Huntsville', 'Grand Prairie', 'Knoxville',
  'Worcester', 'Newport News', 'Brownsville', 'Overland Park', 'Santa Rosa',
  'Peoria', 'Oceanside', 'Tempe', 'Savannah', 'Promontory', 'Bridgeport',
  'Paterson', 'Sioux Falls', 'Springfield', 'Hayward', 'Pomona', 'Escondido',
  'Sunnyvale', 'Killeen', 'Pasadena', 'Naperville', 'Salinas', 'Syracuse',
  'Torrance', 'Lakewood', 'Orange', 'Rockford', 'Clearwater', 'Concord',
  'Topeka', 'Thousand Oaks', 'Cedar Rapids', 'Simi Valley', 'Elizabeth',
  'Inglewood', 'Pembroke Pines', 'Salem', 'Eugene', 'Lancaster', 'Corona',
  'Elk Grove', 'Palmdale', 'Salinas', 'Springfield', 'Pasadena', 'Fort Lauderdale',
  'Hayward', 'Hampton', 'Lakewood', 'Hollywood', 'Macon', 'Kansas City'
];

const population = localData.stats?.population || 0;
const isLargeCity = population > 100000 || majorCities.includes(cityName);

// Define different callout messages for variety
const calloutMessages = [
  {
    fact: "Did you know? Proper e-waste recycling can recover precious metals like gold, silver, and platinum from old electronics.",
    cta: "Read our Ultimate Guide to Electronics Recycling to learn more about the recycling process and environmental benefits."
  },
  {
    fact: "Fun fact: One ton of recycled electronics can yield more gold than 17 tons of gold ore.",
    cta: "Discover more fascinating recycling facts in our Ultimate Guide to Electronics Recycling."
  },
  {
    fact: "Did you know? Recycling electronics prevents toxic materials like lead and mercury from contaminating landfills.",
    cta: "Learn about safe disposal methods in our Ultimate Guide to Electronics Recycling."
  },
  {
    fact: "Amazing fact: Electronics recycling can reduce greenhouse gas emissions by up to 2.5 million tons annually.",
    cta: "Find out how you can make a difference with our Ultimate Guide to Electronics Recycling."
  }
];

// Select a consistent message based on city name hash
const calloutIndex = cityHash % calloutMessages.length;
const selectedCallout = calloutMessages[calloutIndex];

// Helper function to convert working hours to schema.org format
function formatOpeningHours(workingHours: any): string | undefined {
  if (!workingHours) return undefined;
  
  // If it's already a string, return it
  if (typeof workingHours === 'string') {
    // Check if it's in a valid schema.org format
    if (workingHours.includes('24/7') || workingHours.includes('24 hours')) {
      return 'Mo-Su 00:00-24:00';
    }
    return workingHours;
  }
  
  // If it's an object with day properties, convert to schema.org format
  if (typeof workingHours === 'object') {
    try {
      const dayMap: Record<string, string> = {
        'monday': 'Mo',
        'tuesday': 'Tu', 
        'wednesday': 'We',
        'thursday': 'Th',
        'friday': 'Fr',
        'saturday': 'Sa',
        'sunday': 'Su'
      };
      
      // Group days by hours to create more compact format
      const hoursTodays: Record<string, string[]> = {};
      
      for (const [day, hours] of Object.entries(workingHours)) {
        if (typeof hours === 'string' && hours.trim()) {
          const dayCode = dayMap[day.toLowerCase()];
          if (dayCode) {
            // Skip "Closed" or similar values for schema.org (only include actual hours)
            if (hours.toLowerCase().includes('closed') || hours.toLowerCase().includes('close')) {
              continue;
            }
            const convertedHours = convertTimeFormat(hours as string);
            if (convertedHours) {
              if (!hoursTodays[convertedHours]) {
                hoursTodays[convertedHours] = [];
              }
              hoursTodays[convertedHours].push(dayCode);
            }
          }
        }
      }
      
      // Create compact format by grouping consecutive days
      const schedules: string[] = [];
      for (const [hours, days] of Object.entries(hoursTodays)) {
        if (days.length > 0) {
          // Sort days in week order
          const sortedDays = days.sort((a, b) => {
            const order = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
            return order.indexOf(a) - order.indexOf(b);
          });
          
          // Group consecutive days (e.g., Mo-Fr instead of Mo,Tu,We,Th,Fr)
          const dayString = groupConsecutiveDays(sortedDays);
          schedules.push(`${dayString} ${hours}`);
        }
      }
      
      return schedules.length > 0 ? schedules.join(', ') : undefined;
    } catch (error) {
      console.error('Error formatting opening hours:', error);
      return undefined;
    }
  }
  
  return undefined;
}

// Helper function to group consecutive days
function groupConsecutiveDays(days: string[]): string {
  if (days.length === 0) return '';
  if (days.length === 1) return days[0];
  
  const dayOrder = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
  const groups: string[] = [];
  let currentGroup = [days[0]];
  
  for (let i = 1; i < days.length; i++) {
    const currentIndex = dayOrder.indexOf(days[i]);
    const previousIndex = dayOrder.indexOf(days[i - 1]);
    
    // Check if days are consecutive
    if (currentIndex === previousIndex + 1) {
      currentGroup.push(days[i]);
    } else {
      // End current group and start new one
      if (currentGroup.length >= 3) {
        groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
      } else {
        groups.push(currentGroup.join(','));
      }
      currentGroup = [days[i]];
    }
  }
  
  // Handle the last group
  if (currentGroup.length >= 3) {
    groups.push(`${currentGroup[0]}-${currentGroup[currentGroup.length - 1]}`);
  } else {
    groups.push(currentGroup.join(','));
  }
  
  return groups.join(',');
}

// Helper function to convert time format to 24-hour format
function convertTimeFormat(timeStr: string): string | undefined {
  if (!timeStr) return undefined;
  
  try {
    // Handle "24/7" or "24 hours" cases
    if (timeStr.includes('24/7') || timeStr.includes('24 hours') || timeStr.toLowerCase().includes('24 hour')) {
      return '00:00-24:00';
    }
    
    // Handle formats like "9AM-6PM", "9:00AM-6:00PM", etc.
    const timePattern = /(\d{1,2}):?(\d{0,2})\s*(AM|PM)?\s*[-–]\s*(\d{1,2}):?(\d{0,2})\s*(AM|PM)?/i;
    const match = timeStr.match(timePattern);
    
    if (match) {
      let [, startHour, startMin = '00', startPeriod = '', endHour, endMin = '00', endPeriod = ''] = match;
      
      // Convert to 24-hour format
      let start24 = parseInt(startHour);
      let end24 = parseInt(endHour);
      
      if (startPeriod.toUpperCase() === 'PM' && start24 !== 12) start24 += 12;
      if (startPeriod.toUpperCase() === 'AM' && start24 === 12) start24 = 0;
      if (endPeriod.toUpperCase() === 'PM' && end24 !== 12) end24 += 12;
      if (endPeriod.toUpperCase() === 'AM' && end24 === 12) end24 = 0;
      
      const startTime = `${start24.toString().padStart(2, '0')}:${startMin.padStart(2, '0')}`;
      const endTime = `${end24.toString().padStart(2, '0')}:${endMin.padStart(2, '0')}`;
      
      return `${startTime}-${endTime}`;
    }
    
    // If we can't parse it, return the original string
    return timeStr;
  } catch (error) {
    console.error('Error converting time format:', error);
    return timeStr;
  }
}

// Generate optimized title (target: 50-60 characters)
const maxTitleLength = 60;
const baseTitle = `Electronics Recycling Centers in ${cityName}, ${state.name} - Directory`;
const mediumTitle = `Electronics Recycling Centers in ${cityName}, ${state.name}`;
const shortTitle = `E-Waste Recycling Centers in ${cityName}, ${state.name}`;
const ultraShortTitle = `E-Waste Centers: ${cityName}, ${state.name}`;

let pageTitle;
if (baseTitle.length <= maxTitleLength) {
  pageTitle = baseTitle;
} else if (mediumTitle.length <= maxTitleLength) {
  pageTitle = mediumTitle;
} else if (shortTitle.length <= maxTitleLength) {
  pageTitle = shortTitle;
} else {
  pageTitle = ultraShortTitle;
}
---

<Layout 
  title={metaTitle}
  description={metaDescription}
  ogImage={ogImageUrl}
>
  <!-- Google Maps API and Global Direction Functions -->
  <script is:inline define:vars={{ mapApiKey: import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY }}>
    // Store API key in a global variable
    window.GOOGLE_MAPS_API_KEY = mapApiKey || '';
    
    // Define directions functions
    window.showDirections = function(lat, lng) {
      if (!lat || !lng) return;
      window.open('https://www.google.com/maps/dir/?api=1&destination=' + lat + ',' + lng, '_blank');
    };
    window.openDirections = window.showDirections;
    
    // Global flag to track if Google Maps is loading or loaded
    window.googleMapsLoading = false;
    window.googleMapsLoaded = false;
    
    // Initialize Google Maps
    function initGoogleMaps() {
      window.googleMapsLoaded = true;
      window.dispatchEvent(new Event('google-maps-ready'));
    }
    window.initGoogleMaps = initGoogleMaps;
    
    // Function to load Google Maps script
    function loadGoogleMaps() {
      // Check if API key is available
      if (!window.GOOGLE_MAPS_API_KEY) {
        console.error('Google Maps API key is not configured');
        return;
      }
      
      // Check if Google Maps is already loaded
      if (window.google && window.google.maps) {
        window.googleMapsLoaded = true;
        window.dispatchEvent(new Event('google-maps-ready'));
        return;
      }
      
      // Check if we're already loading
      if (window.googleMapsLoading) {
        return;
      }
      
      // Check if script tag already exists
      if (document.querySelector('script[src*="maps.googleapis.com"]')) {
        return;
      }
      
      window.googleMapsLoading = true;
      
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${window.GOOGLE_MAPS_API_KEY}&callback=initGoogleMaps&libraries=places&v=weekly`;
      script.async = true;
      script.defer = true;
      script.onerror = function() {
        console.error('Failed to load Google Maps script');
        window.googleMapsLoading = false;
      };
      document.head.appendChild(script);
    }
    
    // Load maps when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadGoogleMaps);
    } else {
      loadGoogleMaps();
    }
  </script>
  
  <!-- Map layout styles -->
  <style is:inline>
    @media (min-width: 1024px) {
      .map-container {
        grid-column: 1;
        grid-row: 1;
      }
      .centers-container {
        grid-column: 2;
        grid-row: 1;
      }
    }
  </style>

  <!-- City Hero Image Section -->
  <div class="pt-16"> <!-- Added padding to account for fixed header -->
    <div class="relative h-64 mb-8 rounded-xl overflow-hidden">
    <img 
      src={cityHeroImage} 
      alt={`${cityName}, ${state.name} cityscape`} 
      class="w-full h-full object-cover"
    />
    <div class="absolute inset-0 bg-gradient-to-r from-green-900/80 via-green-800/60 to-transparent">
      <div class="container mx-auto px-4 h-full flex items-center">
        <div class="text-white">
          <div class="mb-4">
            <a 
              href={`/states/${stateParam}`}
              class="text-green-200 hover:text-white flex items-center text-sm"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
              Back to {state.name}
            </a>
          </div>
          <h1 class="text-4xl md:text-5xl font-display font-bold mb-2">
            Electronics Recycling in {cityName}
          </h1>
          <p class="text-xl text-green-100">
            {displayCenters.length} certified recycling {displayCenters.length === 1 ? 'center' : 'centers'} serving the {cityName} area
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Main content -->
  <div class="container mx-auto px-4 py-8">
    <!-- Quick Stats Header -->
    <div class="mb-8">
             <div class="flex flex-col sm:flex-row sm:items-center gap-4 mb-4">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-2xl font-semibold text-gray-900">Recycling Centers in {locationDescription}</h2>
            <p class="text-gray-600">
              Find certified e-waste disposal facilities near you
            </p>
          </div>
        </div>
        
        <!-- Quick Stats -->
        <div class="flex flex-wrap items-center gap-4">
          {verifiedCenters.length > 0 && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <span class="text-sm text-gray-600">{verifiedCenters.length} verified</span>
            </div>
          )}
          
          {centersWithLegitimacy.length > verifiedCenters.length && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
              <span class="text-sm text-gray-600">{centersWithLegitimacy.length - verifiedCenters.length} checked</span>
            </div>
          )}
          
          {unverifiedCenters.length > 0 && (
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
              <span class="text-sm text-gray-600">{unverifiedCenters.length} need verification</span>
            </div>
          )}
          
          {averageLegitimacyScore && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-sm text-gray-600">Avg. score: {averageLegitimacyScore}</span>
            </div>
          )}
        </div>
      </div>

      <!-- Nearby Centers Message -->
      {showNearbyMessage && (
        <div class="bg-yellow-50 border border-yellow-100 p-4 rounded-lg mb-4">
          <p class="text-base text-yellow-800">
            <span class="font-semibold">Note:</span> We couldn't find recycling centers specifically in {cityName}, 
            so we're showing you nearby options in the {state.name} area instead.
          </p>
        </div>
      )}

      <!-- Data-Driven Content Section -->
      {displayCenters.length > 0 && (
        <div class="mt-6 bg-gray-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">
            Electronics Recycling Guide for {cityName}
          </h2>
          
          {/* Dynamic intro based on local data */}
          <div class="prose prose-gray max-w-none text-gray-700 space-y-4">
            <p>
              {selectedIntroPhrase}
              {localData.regulations?.has_ewaste_ban && ` What's great about ${cityName} is that it has strict e-waste disposal laws, meaning electronics are banned from regular landfills—keeping our community environmentally responsible.`}
              {!localData.regulations?.has_ewaste_ban && localData.regulations?.municipal_programs && ` The city actively supports electronics recycling through local programs and partnerships with certified facilities.`}
              {localData.regulations?.special_events && ` Plus, ${cityName} hosts special e-waste collection events throughout the year, making it even easier for residents to dispose of old electronics safely.`}
              {verifiedCenters.length > 0 && ` We've personally verified ${verifiedCenters.length} ${verifiedCenters.length === 1 ? 'business' : 'businesses'} 
              to ensure they follow legitimate recycling practices that protect both your data and our environment.`}
            </p>
            
            {businessTypes.size > 0 && (
              <p>
                Local recycling services in {cityName} specialize in various areas including{' '}
                {Array.from(businessTypes.entries())
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 3)
                  .map(([type, count], index, array) => {
                    const isLast = index === array.length - 1;
                    const isSecondToLast = index === array.length - 2;
                    const centerWord = count === 1 ? 'center' : 'centers';
                    return `${type.toLowerCase()} – ${count} ${centerWord}${isLast ? '' : isSecondToLast && array.length > 2 ? ', and ' : ', '}`;
                  })
                  .join('')}. This diversity ensures residents can find appropriate disposal methods for different types of electronic waste.
              </p>
            )}
            
            {averageRating && centersWithRatings.length > 2 && (
              <p>
                Customer satisfaction in {cityName}'s e-waste industry is strong, with an average rating of {averageRating} stars 
                based on {totalReviews.toLocaleString()} customer reviews across {centersWithRatings.length} businesses. 
                This reflects the community's commitment to reliable and professional recycling services.
              </p>
            )}
            
            <p>
              When selecting the right recycling partner in {cityName}, we recommend looking for businesses that offer secure data destruction, 
              convenient pickup services for bulky items, and maintain industry certifications. {verifiedCenters.length > 0 ? 
              `Good news: we've already done the legwork on ${verifiedCenters.length} of these centers, confirming they're legitimate businesses with responsible disposal practices.` :
              'Pro tip: always ask about their data wiping process and disposal certifications before dropping off your devices.'}
            </p>
            
            {centersWithDescriptions.length > Math.floor(displayCenters.length * 0.6) && (
              <p>
                Most recycling centers in {cityName} provide detailed information about their services, including {centersWithHours.length} businesses 
                with posted operating hours{centersWithLogos.length > 5 ? `, and ${centersWithLogos.length} with professional business profiles` : ''}. 
                This transparency helps residents make informed decisions about where to recycle their electronics safely.
              </p>
            )}
          </div>
        </div>
      )}

      <!-- Data-Driven City Insights -->
      {displayCenters.length > 3 && (
        <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <!-- Business Specialties -->
          {businessTypes.size > 0 && (
            <div class="bg-blue-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-blue-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Popular Services
              </h3>
              <div class="space-y-1">
                {Array.from(businessTypes.entries())
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 2)
                  .map(([type, count]) => (
                    <div class="flex justify-between text-sm">
                      <span class="text-blue-700 capitalize">{type} recycling</span>
                      <span class="text-blue-600 font-medium">{count} {count === 1 ? 'center' : 'centers'}</span>
                    </div>
                  ))}
              </div>
            </div>
          )}

          <!-- Customer Satisfaction -->
          {averageRating && centersWithRatings.length > 2 && (
            <div class="bg-green-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-green-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
                Customer Reviews
              </h3>
              <div class="text-sm space-y-1">
                <div class="flex items-center gap-2">
                  <span class="text-2xl font-bold text-green-700">{averageRating}</span>
                  <div class="flex text-yellow-400">
                    {Array.from({ length: Math.round(averageRating) }).map(() => (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                      </svg>
                    ))}
                  </div>
                </div>
                <p class="text-green-600">
                  Based on {totalReviews.toLocaleString()} reviews from {centersWithRatings.length} businesses
                </p>
              </div>
            </div>
          )}

          <!-- Verification Activity -->
          {(recentlyVerified.length > 0 || verifiedCenters.length > 0) && (
            <div class="bg-purple-50 rounded-lg p-4">
              <h3 class="text-sm font-semibold text-purple-900 mb-2 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Verification Status
              </h3>
              <div class="text-sm space-y-1">
                {recentlyVerified.length > 0 && (
                  <p class="text-purple-600">
                    {recentlyVerified.length} recently verified (last 30 days)
                  </p>
                )}
                {averageLegitimacyScore && (
                  <div class="text-purple-600">
                    <p class="mb-1">
                      Average trust score: <span class="font-semibold">{averageLegitimacyScore}/100</span>
                    </p>
                    <p class="text-xs text-purple-500">
                      Based on website analysis for e-waste keywords & services. 
                      Scores ≥30 = legitimate, scores can exceed 100 for highly specialized recyclers.
                    </p>
                  </div>
                )}
                <p class="text-purple-600">
                  {Math.round((verifiedCenters.length / displayCenters.length) * 100)}% verified businesses
                </p>
              </div>
            </div>
          )}
        </div>
      )}

    </div>

    <!-- Large City Callout -->
    {isLargeCity && (
      <div class="mb-8 bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0">
            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <div class="flex-1">
            <h3 class="text-lg font-semibold text-gray-900 mb-2">
              {selectedCallout.fact}
            </h3>
            <p class="text-gray-700 mb-4">
              {selectedCallout.cta}
            </p>
            <a 
              href="/blog/recycling-guide" 
              class="inline-flex items-center px-4 py-2 bg-green-600 text-white font-medium rounded-md hover:bg-green-700 transition-colors"
            >
              Read the Guide
              <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    )}

    <!-- Sort Controls -->
    <div class="mb-6 flex justify-between items-center">
      <h2 class="text-lg font-semibold text-gray-900">
        Recycling Centers ({displayCenters.length})
      </h2>
      <div id="sort-button-container"></div>
    </div>

    <!-- Main Map and Centers Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
      <!-- Map Section -->
      <div class="map-container rounded-xl overflow-hidden shadow-lg h-[600px] lg:sticky lg:top-8">
        {mapMarkers.length > 0 ? (
          <MapComponent 
            markers={mapMarkers}
            initialZoom={12}
          />
        ) : (
          <div class="w-full h-full flex items-center justify-center bg-gray-100">
            <p class="text-gray-500">Map not available</p>
          </div>
        )}
      </div>

      <!-- Recycling Centers List (scrollable) -->
      <div class="centers-container lg:h-[600px] lg:overflow-y-auto">
        <CentersList centers={displayCenters} defaultLogo={DEFAULT_LOGO} />
      </div>
    </div>

    <!-- Enhanced City-Specific Content -->
    <CityContentEnhancer 
      cityName={cityName}
      state={state.name}
      centers={displayCenters}
      localData={localData}
      showNearbyMessage={showNearbyMessage}
    />

    <!-- Quick Preparation Tips -->
    <div class="mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
      <h3 class="font-medium text-yellow-800 mb-2 flex items-center">
        <svg class="w-4 h-4 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        Before You Go
      </h3>
      <p class="text-sm text-yellow-700">
        Remove personal data, call ahead to confirm accepted items and hours. {state.name} requires proper e-waste disposal - never put electronics in regular trash.
      </p>
    </div>





  </div>
  </div> <!-- End padding wrapper for fixed header -->

  <!-- Map interactions script -->
  {mapMarkers.length > 0 && (
    <script>
      interface MarkerClickEvent extends CustomEvent<{ centerId: string }> {
        type: 'markerClick';
      }

      function handleMarkerClick(event: MarkerClickEvent) {
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Find and highlight the center card
        const centerElement = document.getElementById(`center-${event.detail.centerId}`);
        if (centerElement) {
          centerElement.classList.add('highlight-center');
          centerElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      function handleCenterClick(event: MouseEvent) {
        // Don't trigger if clicking on a button or link
        if ((event.target as Element).closest('button') || (event.target as Element).closest('a')) {
          return;
        }
        
        const card = event.currentTarget as Element;
        const centerId = card.getAttribute('data-center-id');
        if (!centerId) return;
        
        // Remove highlight from all centers
        document.querySelectorAll('[data-center-id]').forEach((el) => {
          el.classList.remove('highlight-center');
        });
        
        // Add highlight to the clicked center
        card.classList.add('highlight-center');
        
        // Notify the map to focus on this marker
        const customEvent = new CustomEvent('centerSelect', {
          detail: { centerId }
        });
        document.dispatchEvent(customEvent);
      }
      
      function setupInteractions() {
        // Handle marker clicks
        document.addEventListener('markerClick', handleMarkerClick as EventListener);
        
        // Add click handlers to all center cards
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
          card.addEventListener('click', handleCenterClick as EventListener);
        });
      }
      
      // Set up interactions on initial page load
      setupInteractions();
      
      // Set up interactions after each Astro page transition
      document.addEventListener('astro:page-load', setupInteractions);
      
      // Clean up event listeners before page transitions
      document.addEventListener('astro:before-preparation', () => {
        document.removeEventListener('markerClick', handleMarkerClick as EventListener);
        document.querySelectorAll('[data-center-id]').forEach(card => {
          card.removeEventListener('click', handleCenterClick as EventListener);
        });
      });
    </script>
  )}

  <!-- Structured data for SEO (hidden from display) -->
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    'itemListElement': [
      {
        '@type': 'ListItem',
        position: 1,
        name: 'Home',
        item: 'https://www.recycleoldtech.com/'
      },
      {
        '@type': 'ListItem',
        position: 2,
        name: state.name,
        item: `https://www.recycleoldtech.com/states/${stateParam}`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: cityName,
        item: `https://www.recycleoldtech.com/states/${stateParam}/${cityParam}`
      }
    ]
  })}></script>
  
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@graph': centers.map(center => {
      const business: Record<string, any> = {
        '@type': 'LocalBusiness',
        name: center.name,
        address: {
          '@type': 'PostalAddress',
          streetAddress: center.full_address || '',
          addressLocality: cityName,
          addressRegion: state.name,
          addressCountry: 'US',
        },
        telephone: center.phone || undefined,
        url: center.site || undefined,
        image: center.logo || undefined,
        geo: center.latitude && center.longitude ? {
          '@type': 'GeoCoordinates',
          latitude: center.latitude,
          longitude: center.longitude
        } : undefined,
        openingHours: formatOpeningHours(center.working_hours) || undefined,
        aggregateRating: center.rating ? {
          '@type': 'AggregateRating',
          ratingValue: center.rating,
          reviewCount: center.reviews || 1
        } : undefined,
        description: center.description || undefined
      };
      // Remove undefined fields
      Object.keys(business).forEach(key => business[key] === undefined && delete business[key]);
      return business;
    })
  })}></script>
</Layout>
